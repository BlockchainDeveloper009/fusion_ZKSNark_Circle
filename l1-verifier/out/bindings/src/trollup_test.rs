pub use trollup_test::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod trollup_test {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "TrollupTest was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    # [rustfmt :: skip] const __ABI : & str = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testProof1\",\"outputs\":[]}]" ;
    #[doc = r" The parsed JSON-ABI of the contract."]
    pub static TROLLUPTEST_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers::core::utils::__serde_json::from_str(__ABI).expect("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static TROLLUPTEST_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x60806040526007805460ff191660011790556200001b62000032565b6008553480156200002b57600080fd5b506200124a565b6040805160a08101825260056060820181815264105b9d9a5b60da1b60808401528252617a6960208084019190915283518085018552601581527f687474703a2f2f3132372e302e302e313a3835343500000000000000000000009181019190915282840152915164185b9d9a5b60da1b81526000926009910190815260405190819003602001902081518190620000cb908262000ef8565b506020820151600182015560408201516002820190620000ec908262000ef8565b50506040805160a0810182526007606082018181526612185c991a185d60ca1b60808401528252617a6960208084019190915283518085018552601581527f687474703a2f2f3132372e302e302e313a38353435000000000000000000000091810191909152828401529151661a185c991a185d60ca1b815290925060099101908152604051908190036020019020815181906200018b908262000ef8565b506020820151600182015560408201516002820190620001ac908262000ef8565b5090505060405180606001604052806040518060400160405280600781526020016613585a5b9b995d60ca1b8152508152602001600181526020016040518060600160405280603d815260200162003029603d91399052604051661b585a5b9b995d60ca1b81526009906007019081526040519081900360200190208151819062000238908262000ef8565b50602082015160018201556040820151600282019062000259908262000ef8565b50905050604051806060016040528060405180604001604052806006815260200165476f65726c6960d01b8152508152602001600581526020016040518060600160405280603c815260200162003066603c9139905260405165676f65726c6960d01b815260099060060190815260405190819003602001902081518190620002e3908262000ef8565b50602082015160018201556040820151600282019062000304908262000ef8565b50506040805160a081018252600760608201818152665365706f6c696160c81b6080840152825262aa36a760208084019190915283518085018552601781527f68747470733a2f2f7270632e7365706f6c69612e64657600000000000000000091810191909152828401529151667365706f6c696160c81b81529092506009910190815260405190819003602001902081518190620003a4908262000ef8565b506020820151600182015560408201516002820190620003c5908262000ef8565b50506040805160a081018252600860608201818152674f7074696d69736d60c01b60808401528252600a60208084019190915283518085018552601b81527f68747470733a2f2f6d61696e6e65742e6f7074696d69736d2e696f000000000091810191909152828401529151676f7074696d69736d60c01b8152909250600991019081526040519081900360200190208151819062000465908262000ef8565b50602082015160018201556040820151600282019062000486908262000ef8565b50506040805160a081018252600f606082018181526e4f7074696d69736d20476f65726c6960881b608084015282526101a460208084019190915283518085018552601a81527f68747470733a2f2f676f65726c692e6f7074696d69736d2e696f000000000000918101919091528284015291516e6f7074696d69736d5f676f65726c6960881b8152909250600991019081526040519081900360200190208151819062000535908262000ef8565b50602082015160018201556040820151600282019062000556908262000ef8565b50506040805160a081018252600c606082018181526b417262697472756d204f6e6560a01b6080840152825261a4b160208084019190915283518085018552601c81527f68747470733a2f2f617262312e617262697472756d2e696f2f72706300000000918101919091528284015291516b617262697472756d5f6f6e6560a01b81529092506009910190815260405190819003602001902081518190620005ff908262000ef8565b50602082015160018201556040820151600282019062000620908262000ef8565b5090505060405180606001604052806040518060400160405280601381526020017f417262697472756d204f6e6520476f65726c6900000000000000000000000000815250815260200162066eed8152602001604051806060016040528060258152602001620030a26025913990526040517f617262697472756d5f6f6e655f676f65726c6900000000000000000000000000815260099060130190815260405190819003602001902081518190620006da908262000ef8565b506020820151600182015560408201516002820190620006fb908262000ef8565b50506040805160a081018252600d606082018181526c417262697472756d204e6f766160981b6080840152825261a4ba60208084019190915283518085018552601c81527f68747470733a2f2f6e6f76612e617262697472756d2e696f2f72706300000000918101919091528284015291516c617262697472756d5f6e6f766160981b81529092506009910190815260405190819003602001902081518190620007a6908262000ef8565b506020820151600182015560408201516002820190620007c7908262000ef8565b50506040805160a081018252600760608201818152662837b63cb3b7b760c91b60808401528252608960208084019190915283518085018552601781527f68747470733a2f2f706f6c79676f6e2d7270632e636f6d00000000000000000091810191909152828401529151663837b63cb3b7b760c91b8152909250600991019081526040519081900360200190208151819062000865908262000ef8565b50602082015160018201556040820151600282019062000886908262000ef8565b50506040805160a081018252600e606082018181526d506f6c79676f6e204d756d62616960901b608084015282526201388160208084019190915283518085018552601e81527f68747470733a2f2f7270632d6d756d6261692e6d617469632e746f6461790000918101919091528284015291516d706f6c79676f6e5f6d756d62616960901b8152909250600991019081526040519081900360200190208151819062000934908262000ef8565b50602082015160018201556040820151600282019062000955908262000ef8565b509050506040518060600160405280604051806040016040528060098152602001684176616c616e63686560b81b815250815260200161a86a815260200160405180606001604052806025815260200162003004602591399052604051686176616c616e63686560b81b8152600990810190815260405190819003602001902081518190620009e5908262000ef8565b50602082015160018201556040820151600282019062000a06908262000ef8565b5090505060405180606001604052806040518060400160405280600e81526020016d4176616c616e6368652046756a6960901b815250815260200161a86981526020016040518060600160405280602a8152602001620030c7602a913990526040516d6176616c616e6368655f66756a6960901b8152600990600e019081526040519081900360200190208151819062000aa1908262000ef8565b50602082015160018201556040820151600282019062000ac2908262000ef8565b5090505060405180606001604052806040518060400160405280600f81526020016e2127211029b6b0b93a1021b430b4b760891b815250815260200160388152602001604051806060016040528060218152602001620030f16021913990526040516e3137312fb9b6b0b93a2fb1b430b4b760891b8152600990600f019081526040519081900360200190208151819062000b5e908262000ef8565b50602082015160018201556040820151600282019062000b7f908262000ef8565b5090505060405180606001604052806040518060400160405280601781526020017f424e4220536d61727420436861696e20546573746e65740000000000000000008152508152602001606181526020016040518060600160405280602e815260200162002fd6602e913990526040517f626e625f736d6172745f636861696e5f746573746e657400000000000000000081526009906017019081526040519081900360200190208151819062000c37908262000ef8565b50602082015160018201556040820151600282019062000c58908262000ef8565b50506040805160a081018252600c606082018181526b23b737b9b4b99021b430b4b760a11b60808401528252606460208084019190915283518085018552601b81527f68747470733a2f2f7270632e676e6f736973636861696e2e636f6d0000000000918101919091528284015291516b33b737b9b4b9afb1b430b4b760a11b8152909250600991019081526040519081900360200190208151819062000d00908262000ef8565b50602082015160018201556040820151600282019062000d21908262000ef8565b5090505060007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b0316639d2ad72a6040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000d89573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000db39190810190620010bc565b905060005b815181101562000e4a5781818151811062000dd75762000dd7620011ee565b602002602001015160200151600983838151811062000dfa5762000dfa620011ee565b60200260200101516000015160405162000e15919062001204565b9081526020016040518091039020600201908162000e34919062000ef8565b508062000e418162001222565b91505062000db8565b50600091505090565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168062000e7e57607f821691505b60208210810362000e9f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000ef357600081815260208120601f850160051c8101602086101562000ece5750805b601f850160051c820191505b8181101562000eef5782815560010162000eda565b5050505b505050565b81516001600160401b0381111562000f145762000f1462000e53565b62000f2c8162000f25845462000e69565b8462000ea5565b602080601f83116001811462000f64576000841562000f4b5750858301515b600019600386901b1c1916600185901b17855562000eef565b600085815260208120601f198616915b8281101562000f955788860151825594840194600190910190840162000f74565b508582101562000fb45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604080519081016001600160401b038111828210171562000fe95762000fe962000e53565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200101a576200101a62000e53565b604052919050565b60005b838110156200103f57818101518382015260200162001025565b50506000910152565b600082601f8301126200105a57600080fd5b81516001600160401b0381111562001076576200107662000e53565b6200108b601f8201601f191660200162000fef565b818152846020838601011115620010a157600080fd5b620010b482602083016020870162001022565b949350505050565b60006020808385031215620010d057600080fd5b82516001600160401b0380821115620010e857600080fd5b818501915085601f830112620010fd57600080fd5b81518181111562001112576200111262000e53565b8060051b6200112385820162000fef565b91825283810185019185810190898411156200113e57600080fd5b86860192505b83831015620011e1578251858111156200115e5760008081fd5b86016040818c03601f1901811315620011775760008081fd5b6200118162000fc4565b8983015188811115620011945760008081fd5b620011a48e8c8387010162001048565b825250908201519087821115620011bb5760008081fd5b620011cb8d8b8486010162001048565b818b015284525050918601919086019062001144565b9998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b600082516200121881846020870162001022565b9190910192915050565b6000600182016200124357634e487b7160e01b600052601160045260246000fd5b5060010190565b611d7c806200125a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630a9254e4146100515780635eef12321461005b578063ba414fa614610063578063fa7626d41461007f575b600080fd5b61005961008c565b005b6100596100d7565b61006b6103f0565b604051901515815260200160405180910390f35b60075461006b9060ff1681565b604051610098906107cb565b604051809103906000f0801580156100b4573d6000803e3d6000fd5b50601180546001600160a01b0319166001600160a01b0392909216919091179055565b6100df6107d8565b80517f28f0c5072e5284e83ee5a61d9672688c4dd5625c73e990016c5933de6ffb1cff905280517f1efdc4c4c0cc1d206f0b348c516a31decbcb7a93d2c8e85563b6d7ed076756fe6020918201526040805180820182527f1a90fc703007b9d830acf36c5db1d130476f501ca9e6d91b7a648a512503e8c381527f08f4c05448102cc5b17ed766b0e522f2046a3f06dc754a990b872f4a195f0e0481840152828401805191909152815180830183527f28607f6bce659428699fefd19edd67a5001932d92d403e2e4f4aa8e680c5179f81527f0a3121ff6231a515f184c1a6b673d2b6573cdcd4d87d326009721c58ea54b22381850152905183015280830180517f0f198773e352a17e1e81bd0615331bd1a0ec82af34e008898d43c8aa4a5d16789052517f1973943082efd93028a4a534c1ac29b021f9177acdfee023ff9837a9395152ee90830152805161010081018252600080825273318a2475f1ba1a1ac4562d1541512d3649ee11318285018190528284018290526201000060608401526080830182905260a083015260c0820181905260e0820152601154825163ebf0c71760e01b8152925191936102ee936001600160a01b039092169263ebf0c7179260048082019392918290030181865afa1580156102c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102e79190610863565b600061051d565b6011546001600160a01b0316634655038b8361030984610644565b6040518363ffffffff1660e01b81526004016103269291906108a5565b600060405180830381600087803b15801561034057600080fd5b505af1158015610354573d6000803e3d6000fd5b505050506103ec601160009054906101000a90046001600160a01b03166001600160a01b031663ebf0c7176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103d29190610863565b73318a2475f1ba1a1ac4562d1541512d3649ee113161051d565b5050565b600754600090610100900460ff16156104125750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156105185760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916104a0917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610971565b60408051601f19818403018152908290526104ba91610995565b6000604051808303816000865af19150503d80600081146104f7576040519150601f19603f3d011682016040523d82523d6000602084013e6104fc565b606091505b509150508080602001905181019061051491906109a8565b9150505b919050565b8082146103ec577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161058e9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16103ec6106bf565b6040805160088082526101208201909252606091602082016101008036833701905050905060005b60088110156106b957828160088110610687576106876109ca565b602002015182828151811061069e5761069e6109ca565b60209081029190910101526106b2816109e0565b905061066c565b50919050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156107ba5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526107599291602001610971565b60408051601f198184030181529082905261077391610995565b6000604051808303816000865af19150503d80600081146107b0576040519150601f19603f3d011682016040523d82523d6000602084013e6107b5565b606091505b505050505b6007805461ff001916610100179055565b61133f80610a0883390190565b6040805160a081019091526000606082018181526080830191909152815260208101610802610829565b8152602001610824604051806040016040528060008152602001600081525090565b905290565b604051806040016040528061083c610845565b81526020016108245b60405180604001604052806002906020820280368337509192915050565b60006020828403121561087557600080fd5b5051919050565b8060005b600281101561089f578151845260209384019390910190600101610880565b50505050565b60006101208083016108c284875180518252602090810151910152565b6020808701516108d660408701825161087c565b8101516108e6608087018261087c565b506040870151805160c08701526020015160e08601526101008501929092528451908190526101408401918581019160005b8181101561093457835185529382019392820192600101610918565b5092979650505050505050565b6000815160005b818110156109625760208185018101518683015201610948565b50600093019283525090919050565b6001600160e01b031983168152600061098d6004830184610941565b949350505050565b60006109a18284610941565b9392505050565b6000602082840312156109ba57600080fd5b815180151581146109a157600080fd5b634e487b7160e01b600052603260045260246000fd5b600060018201610a0057634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b5061131f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80634655038b1461003b578063ebf0c71714610050575b600080fd5b61004e610049366004611185565b61006b565b005b61005960005481565b60405190815260200160405180910390f35b805160081461007957600080fd5b8060008151811061008c5761008c611245565b6020026020010151600054146100a157600080fd5b6100ab81836100da565b156100b557600080fd5b806005815181106100c8576100c8611245565b60200260200101516000819055505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018161010661025f565b90508060800151518551600161011c9190611271565b1461012657600080fd5b604080518082019091526000808252602082018190525b86518110156101d4578387828151811061015957610159611245565b60200260200101511061016b57600080fd5b6101c0826101bb85608001518460016101849190611271565b8151811061019457610194611245565b60200260200101518a85815181106101ae576101ae611245565b602002602001015161093c565b61099a565b9150806101cc81611284565b91505061013d565b506101fd8183608001516000815181106101f0576101f0611245565b602002602001015161099a565b905061024185600001518660200151610215846109f0565b85604001516102278a604001516109f0565b60608801518851610237906109f0565b8960200151610a8f565b6102515760019350505050610259565b600093505050505b92915050565b610267610efb565b6040805180820182527f1e19a8a58ad52243374aeded373b7e89656ea339b9fa8ace98dd5fb221885ea281527f2e66a9a67f1a9060a51da039c91c3402d1f46b71bbf10c7348ac4f13c39067366020808301919091529083528151608080820184527f1ca3e556290187c64a1057061f419a078dc71353f6af1066c03d7e1448bbc1198285019081527f2bbc1b80e59743b489ec811b4ebf30a1ff540c2c37ced63d360b94f92f0a41fb606080850191909152908352845180860186527f07eceb98d2fb10fa7363b45f51aa3d3ef3d511b482790645039a2562e2070f3081527f1c3e076d2aaf914abd6a49b72c4205669d3d1cbe4a4bf97b9ee49ac0fbbdbda9818601528385015285840192909252835180820185527f222c0019521d3e52881431be17cacaf8a7379398dd0833f60a2ac45f1c3fcd428186019081527f1018dbb94cd920bd55af4e2b12a9f740c6b38748a163b5dbd37c5ef6cf74708f828501528152845180860186527f18bf34dc86b549a92f316f7a32070a3ce45a0f38fa45dda1162c4b6498baf28681527f12848d5a670b6102d5bd45d2b8250d50361001ea335ff6a1405a52504c22b8ac818601528185015285850152835190810184527f13b8e16c40a6a299ea42107a97f881f9fa89986dcd5234ecb6919caf756ac1cb8185019081527f25b64e4978690cd7cb531dbab0119148c96f5fc0c984c0cafb290bb75f033a09828401528152835180850185527f1758eaa970929deff5e96e5852d21790c32591dbb13bc63e3df046f0271479a481527f14d0b4222ad1710c6330e4bd8ad8f0d7b8f4cff0a37793d53001800e49f41192818501528184015290840152815160098082526101408201909352919082015b60408051808201909152600080825260208201528152602001906001900390816104e357505060808201908152604080518082019091527f0925dc800d3a577859439a049f8ed0ae7a37dcd36652de478d662c08907a762681527f1f7f76e299220ebf3da17bb415d25e6574e142391972dbd1513cf81341975cb560208201529051805160009061057657610576611245565b602002602001018190525060405180604001604052807f0e67dddfd91adad72376c56cbd98d5cfa4df5217d6115ff26ec741d0154f0bd881526020017f0b97b2ddfdf4c31916d98e384bee3b24bfa0fc59a21ab489153f4dcd1a9a48ca81525081608001516001815181106105ed576105ed611245565b602002602001018190525060405180604001604052807f1416b354665883cbbc5f5541012d1f8dd87ebb4415b3ee431be0804fff290bbf81526020017f1a284dd2eff43e6cb5aaea43dd9bee022ef0c91d90d0803cf5f7e4677e94a271815250816080015160028151811061066457610664611245565b602002602001018190525060405180604001604052807f2526852e7f009b4afa1fe0e1d30334c6e516fac223866b81a830b472164bdfe781526020017f28adf6fbe54ba40afa91555c18477ad3a2f0a460f68d55a15b4e0c264b9c11c281525081608001516003815181106106db576106db611245565b602002602001018190525060405180604001604052807f22feae4a12bfb751638cd76b2373e84884ba4adef575ea14ed50c5954d31d41081526020017f108c3da0ffd7eda1fe7789e41693146beb979bd1644b19bbd517742ca3841348815250816080015160048151811061075257610752611245565b602002602001018190525060405180604001604052807f081477a5c52f41533cf6ca4f778ab922d59ba44b5a5e3fbdbf34ed8dc1a47a8d81526020017f0f2624780bd75b9f6c47f7bee582d02f1f983529b8aa9493ca848e38f2ec844781525081608001516005815181106107c9576107c9611245565b602002602001018190525060405180604001604052807f0603e7413c605d1e9b9352a62f0208e2bbd247d3cf3b3721f72c3a9407d679b981526020017f0ce2d2dca8ae14ac4fd2f3fd89e602cdb45de815cf3ba183a25a47d877d9f6f5815250816080015160068151811061084057610840611245565b602002602001018190525060405180604001604052807f05bbe6b58285021fb843123971f8e2cfdd207b02c0aef5923ffe7ac841ee0cc981526020017f2da1d3c2049546a7b46aaf89a8a7de493470087ce9af8ba37673f5ee8c35eb1b81525081608001516007815181106108b7576108b7611245565b602002602001018190525060405180604001604052807f2c721270df9ba8884d309140f3a4b150a8e53a6c9d09bd8fc7c9aa3c4901aa8d81526020017f0de2cb1684759e693e855711fa1c381ae737e463447c3817df507a02064b470f815250816080015160088151811061092e5761092e611245565b602002602001018190525090565b6040805180820190915260008082526020820152610958610f4c565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa9050808061098757fe5b508061099257600080fd5b505092915050565b60408051808201909152600080825260208201526109b6610f6a565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa9050808061098757fe5b604080518082019091526000808252602082015281517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790158015610a3757506020830151155b15610a575750506040805180820190915260008082526020820152919050565b604051806040016040528084600001518152602001828560200151610a7c919061129d565b610a8690846112bf565b90529392505050565b60408051600480825260a08201909252600091829190816020015b6040805180820190915260008082526020820152815260200190600190039081610aaa57505060408051600480825260a0820190925291925060009190602082015b610af4610f88565b815260200190600190039081610aec5790505090508a82600081518110610b1d57610b1d611245565b60200260200101819052508882600181518110610b3c57610b3c611245565b60200260200101819052508682600281518110610b5b57610b5b611245565b60200260200101819052508482600381518110610b7a57610b7a611245565b60200260200101819052508981600081518110610b9957610b99611245565b60200260200101819052508781600181518110610bb857610bb8611245565b60200260200101819052508581600281518110610bd757610bd7611245565b60200260200101819052508381600381518110610bf657610bf6611245565b6020026020010181905250610c0b8282610c1a565b9b9a5050505050505050505050565b60008151835114610c2a57600080fd5b82516000610c398260066112d2565b905060008167ffffffffffffffff811115610c5657610c56610fe9565b604051908082528060200260200182016040528015610c7f578160200160208202803683370190505b50905060005b83811015610eba57868181518110610c9f57610c9f611245565b60200260200101516000015182826006610cb991906112d2565b610cc4906000611271565b81518110610cd457610cd4611245565b602002602001018181525050868181518110610cf257610cf2611245565b60200260200101516020015182826006610d0c91906112d2565b610d17906001611271565b81518110610d2757610d27611245565b602002602001018181525050858181518110610d4557610d45611245565b60209081029190910181015151015182610d608360066112d2565b610d6b906002611271565b81518110610d7b57610d7b611245565b602002602001018181525050858181518110610d9957610d99611245565b6020908102919091010151515182610db28360066112d2565b610dbd906003611271565b81518110610dcd57610dcd611245565b602002602001018181525050858181518110610deb57610deb611245565b602002602001015160200151600160028110610e0957610e09611245565b602002015182610e1a8360066112d2565b610e25906004611271565b81518110610e3557610e35611245565b602002602001018181525050858181518110610e5357610e53611245565b602002602001015160200151600060028110610e7157610e71611245565b602002015182610e828360066112d2565b610e8d906005611271565b81518110610e9d57610e9d611245565b602090810291909101015280610eb281611284565b915050610c85565b50610ec3610fad565b6000602082602086026020860160086107d05a03fa90508080610ee257fe5b5080610eed57600080fd5b505115159695505050505050565b6040805160e08101909152600060a0820181815260c0830191909152815260208101610f25610f88565b8152602001610f32610f88565b8152602001610f3f610f88565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b6040518060400160405280610f9b610fcb565b8152602001610fa8610fcb565b905290565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561102257611022610fe9565b60405290565b6040516060810167ffffffffffffffff8111828210171561102257611022610fe9565b60006040828403121561105d57600080fd5b6040516040810181811067ffffffffffffffff8211171561108057611080610fe9565b604052823581526020928301359281019290925250919050565b600082601f8301126110ab57600080fd5b6110b3610fff565b8060408401858111156110c557600080fd5b845b818110156110df5780358452602093840193016110c7565b509095945050505050565b600082601f8301126110fb57600080fd5b8135602067ffffffffffffffff8083111561111857611118610fe9565b8260051b604051601f19603f8301168101818110848211171561113d5761113d610fe9565b60405293845285810183019383810192508785111561115b57600080fd5b83870191505b8482101561117a57813583529183019190830190611161565b979650505050505050565b60008082840361012081121561119a57600080fd5b610100808212156111aa57600080fd5b6111b2611028565b6111bc878761104b565b81526080603f19840112156111d057600080fd5b6111d8610fff565b92506111e7876040880161109a565b83526111f6876080880161109a565b602084015282602082015261120e8760c0880161104b565b60408201529350840135905067ffffffffffffffff81111561122f57600080fd5b61123b858286016110ea565b9150509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b808201808211156102595761025961125b565b6000600182016112965761129661125b565b5060010190565b6000826112ba57634e487b7160e01b600052601260045260246000fd5b500690565b818103818111156102595761025961125b565b80820281158282048414176102595761025961125b56fea2646970667358221220304194e74a2dc657e1ebd55edfa83b3e22a3ab18ce9e21b28182442ab12c73df64736f6c63430008110033a26469706673582212200ff8335d40629dc47003daa50c1d41147100dfac70370b2cdf490399ef92e39964736f6c6343000811003368747470733a2f2f646174612d736565642d7072656273632d312d73312e62696e616e63652e6f72673a3835343568747470733a2f2f6170692e617661782e6e6574776f726b2f6578742f62632f432f72706368747470733a2f2f6d61696e6e65742e696e667572612e696f2f76332f363737303435346263366561343263353861616331323937383533316239336668747470733a2f2f676f65726c692e696e667572612e696f2f76332f363737303435346263366561343263353861616331323937383533316239336668747470733a2f2f676f65726c692d726f6c6c75702e617262697472756d2e696f2f72706368747470733a2f2f6170692e617661782d746573742e6e6574776f726b2f6578742f62632f432f72706368747470733a2f2f6273632d6461746173656564312e62696e616e63652e6f7267" . parse () . expect ("invalid bytecode")
        });
    pub struct TrollupTest<M>(ethers::contract::Contract<M>);
    impl<M> Clone for TrollupTest<M> {
        fn clone(&self) -> Self {
            TrollupTest(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for TrollupTest<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for TrollupTest<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(TrollupTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> TrollupTest<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), TROLLUPTEST_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                TROLLUPTEST_ABI.clone(),
                TROLLUPTEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testProof1` (0x5eef1232) function"]
        pub fn test_proof_1(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([94, 239, 18, 50], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_1_filter(&self) -> ethers::contract::builders::Event<M, LogArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_2_filter(&self) -> ethers::contract::builders::Event<M, LogArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_3_filter(&self) -> ethers::contract::builders::Event<M, LogArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_1_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_2_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_3_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, TrollupTestEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for TrollupTest<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_array", abi = "log_array(uint256[])")]
    pub struct LogArray1Filter {
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_array", abi = "log_array(int256[])")]
    pub struct LogArray2Filter {
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_array", abi = "log_array(address[])")]
    pub struct LogArray3Filter {
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,uint256[])")]
    pub struct LogNamedArray1Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,int256[])")]
    pub struct LogNamedArray2Filter {
        pub key: String,
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,address[])")]
    pub struct LogNamedArray3Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum TrollupTestEvents {
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogArray1Filter(LogArray1Filter),
        LogArray2Filter(LogArray2Filter),
        LogArray3Filter(LogArray3Filter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedArray1Filter(LogNamedArray1Filter),
        LogNamedArray2Filter(LogNamedArray2Filter),
        LogNamedArray3Filter(LogNamedArray3Filter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for TrollupTestEvents {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogArray1Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogArray1Filter(decoded));
            }
            if let Ok(decoded) = LogArray2Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogArray2Filter(decoded));
            }
            if let Ok(decoded) = LogArray3Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogArray3Filter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedArray1Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedArray1Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray2Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedArray2Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray3Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedArray3Filter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for TrollupTestEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                TrollupTestEvents::LogFilter(element) => element.fmt(f),
                TrollupTestEvents::LogAddressFilter(element) => element.fmt(f),
                TrollupTestEvents::LogArray1Filter(element) => element.fmt(f),
                TrollupTestEvents::LogArray2Filter(element) => element.fmt(f),
                TrollupTestEvents::LogArray3Filter(element) => element.fmt(f),
                TrollupTestEvents::LogBytesFilter(element) => element.fmt(f),
                TrollupTestEvents::LogBytes32Filter(element) => element.fmt(f),
                TrollupTestEvents::LogIntFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedAddressFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedArray1Filter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedArray2Filter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedArray3Filter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedBytesFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedIntFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedStringFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedUintFilter(element) => element.fmt(f),
                TrollupTestEvents::LogStringFilter(element) => element.fmt(f),
                TrollupTestEvents::LogUintFilter(element) => element.fmt(f),
                TrollupTestEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `setUp` function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `testProof1` function with signature `testProof1()` and selector `[94, 239, 18, 50]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "testProof1", abi = "testProof1()")]
    pub struct TestProof1Call;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum TrollupTestCalls {
        IsTest(IsTestCall),
        Failed(FailedCall),
        SetUp(SetUpCall),
        TestProof1(TestProof1Call),
    }
    impl ethers::core::abi::AbiDecode for TrollupTestCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TrollupTestCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TrollupTestCalls::Failed(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TrollupTestCalls::SetUp(decoded));
            }
            if let Ok(decoded) =
                <TestProof1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TrollupTestCalls::TestProof1(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for TrollupTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                TrollupTestCalls::IsTest(element) => element.encode(),
                TrollupTestCalls::Failed(element) => element.encode(),
                TrollupTestCalls::SetUp(element) => element.encode(),
                TrollupTestCalls::TestProof1(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for TrollupTestCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                TrollupTestCalls::IsTest(element) => element.fmt(f),
                TrollupTestCalls::Failed(element) => element.fmt(f),
                TrollupTestCalls::SetUp(element) => element.fmt(f),
                TrollupTestCalls::TestProof1(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsTestCall> for TrollupTestCalls {
        fn from(var: IsTestCall) -> Self {
            TrollupTestCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<FailedCall> for TrollupTestCalls {
        fn from(var: FailedCall) -> Self {
            TrollupTestCalls::Failed(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for TrollupTestCalls {
        fn from(var: SetUpCall) -> Self {
            TrollupTestCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<TestProof1Call> for TrollupTestCalls {
        fn from(var: TestProof1Call) -> Self {
            TrollupTestCalls::TestProof1(var)
        }
    }
    #[doc = "Container type for all return fields from the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct IsTestReturn(pub bool);
    #[doc = "Container type for all return fields from the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct FailedReturn(pub bool);
}
