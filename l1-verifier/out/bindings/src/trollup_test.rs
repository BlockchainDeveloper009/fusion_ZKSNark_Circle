pub use trollup_test::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod trollup_test {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "TrollupTest was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    # [rustfmt :: skip] const __ABI : & str = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testProof1\",\"outputs\":[]}]" ;
    #[doc = r" The parsed JSON-ABI of the contract."]
    pub static TROLLUPTEST_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers::core::utils::__serde_json::from_str(__ABI).expect("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static TROLLUPTEST_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x60806040526007805460ff191660011790556200001b62000032565b6008553480156200002b57600080fd5b506200124a565b6040805160a08101825260056060820181815264105b9d9a5b60da1b60808401528252617a6960208084019190915283518085018552601581527f687474703a2f2f3132372e302e302e313a3835343500000000000000000000009181019190915282840152915164185b9d9a5b60da1b81526000926009910190815260405190819003602001902081518190620000cb908262000ef8565b506020820151600182015560408201516002820190620000ec908262000ef8565b50506040805160a0810182526007606082018181526612185c991a185d60ca1b60808401528252617a6960208084019190915283518085018552601581527f687474703a2f2f3132372e302e302e313a38353435000000000000000000000091810191909152828401529151661a185c991a185d60ca1b815290925060099101908152604051908190036020019020815181906200018b908262000ef8565b506020820151600182015560408201516002820190620001ac908262000ef8565b5090505060405180606001604052806040518060400160405280600781526020016613585a5b9b995d60ca1b8152508152602001600181526020016040518060600160405280603d81526020016200387a603d91399052604051661b585a5b9b995d60ca1b81526009906007019081526040519081900360200190208151819062000238908262000ef8565b50602082015160018201556040820151600282019062000259908262000ef8565b50905050604051806060016040528060405180604001604052806006815260200165476f65726c6960d01b8152508152602001600581526020016040518060600160405280603c8152602001620038b7603c9139905260405165676f65726c6960d01b815260099060060190815260405190819003602001902081518190620002e3908262000ef8565b50602082015160018201556040820151600282019062000304908262000ef8565b50506040805160a081018252600760608201818152665365706f6c696160c81b6080840152825262aa36a760208084019190915283518085018552601781527f68747470733a2f2f7270632e7365706f6c69612e64657600000000000000000091810191909152828401529151667365706f6c696160c81b81529092506009910190815260405190819003602001902081518190620003a4908262000ef8565b506020820151600182015560408201516002820190620003c5908262000ef8565b50506040805160a081018252600860608201818152674f7074696d69736d60c01b60808401528252600a60208084019190915283518085018552601b81527f68747470733a2f2f6d61696e6e65742e6f7074696d69736d2e696f000000000091810191909152828401529151676f7074696d69736d60c01b8152909250600991019081526040519081900360200190208151819062000465908262000ef8565b50602082015160018201556040820151600282019062000486908262000ef8565b50506040805160a081018252600f606082018181526e4f7074696d69736d20476f65726c6960881b608084015282526101a460208084019190915283518085018552601a81527f68747470733a2f2f676f65726c692e6f7074696d69736d2e696f000000000000918101919091528284015291516e6f7074696d69736d5f676f65726c6960881b8152909250600991019081526040519081900360200190208151819062000535908262000ef8565b50602082015160018201556040820151600282019062000556908262000ef8565b50506040805160a081018252600c606082018181526b417262697472756d204f6e6560a01b6080840152825261a4b160208084019190915283518085018552601c81527f68747470733a2f2f617262312e617262697472756d2e696f2f72706300000000918101919091528284015291516b617262697472756d5f6f6e6560a01b81529092506009910190815260405190819003602001902081518190620005ff908262000ef8565b50602082015160018201556040820151600282019062000620908262000ef8565b5090505060405180606001604052806040518060400160405280601381526020017f417262697472756d204f6e6520476f65726c6900000000000000000000000000815250815260200162066eed8152602001604051806060016040528060258152602001620038f36025913990526040517f617262697472756d5f6f6e655f676f65726c6900000000000000000000000000815260099060130190815260405190819003602001902081518190620006da908262000ef8565b506020820151600182015560408201516002820190620006fb908262000ef8565b50506040805160a081018252600d606082018181526c417262697472756d204e6f766160981b6080840152825261a4ba60208084019190915283518085018552601c81527f68747470733a2f2f6e6f76612e617262697472756d2e696f2f72706300000000918101919091528284015291516c617262697472756d5f6e6f766160981b81529092506009910190815260405190819003602001902081518190620007a6908262000ef8565b506020820151600182015560408201516002820190620007c7908262000ef8565b50506040805160a081018252600760608201818152662837b63cb3b7b760c91b60808401528252608960208084019190915283518085018552601781527f68747470733a2f2f706f6c79676f6e2d7270632e636f6d00000000000000000091810191909152828401529151663837b63cb3b7b760c91b8152909250600991019081526040519081900360200190208151819062000865908262000ef8565b50602082015160018201556040820151600282019062000886908262000ef8565b50506040805160a081018252600e606082018181526d506f6c79676f6e204d756d62616960901b608084015282526201388160208084019190915283518085018552601e81527f68747470733a2f2f7270632d6d756d6261692e6d617469632e746f6461790000918101919091528284015291516d706f6c79676f6e5f6d756d62616960901b8152909250600991019081526040519081900360200190208151819062000934908262000ef8565b50602082015160018201556040820151600282019062000955908262000ef8565b509050506040518060600160405280604051806040016040528060098152602001684176616c616e63686560b81b815250815260200161a86a815260200160405180606001604052806025815260200162003855602591399052604051686176616c616e63686560b81b8152600990810190815260405190819003602001902081518190620009e5908262000ef8565b50602082015160018201556040820151600282019062000a06908262000ef8565b5090505060405180606001604052806040518060400160405280600e81526020016d4176616c616e6368652046756a6960901b815250815260200161a86981526020016040518060600160405280602a815260200162003918602a913990526040516d6176616c616e6368655f66756a6960901b8152600990600e019081526040519081900360200190208151819062000aa1908262000ef8565b50602082015160018201556040820151600282019062000ac2908262000ef8565b5090505060405180606001604052806040518060400160405280600f81526020016e2127211029b6b0b93a1021b430b4b760891b815250815260200160388152602001604051806060016040528060218152602001620039426021913990526040516e3137312fb9b6b0b93a2fb1b430b4b760891b8152600990600f019081526040519081900360200190208151819062000b5e908262000ef8565b50602082015160018201556040820151600282019062000b7f908262000ef8565b5090505060405180606001604052806040518060400160405280601781526020017f424e4220536d61727420436861696e20546573746e65740000000000000000008152508152602001606181526020016040518060600160405280602e815260200162003827602e913990526040517f626e625f736d6172745f636861696e5f746573746e657400000000000000000081526009906017019081526040519081900360200190208151819062000c37908262000ef8565b50602082015160018201556040820151600282019062000c58908262000ef8565b50506040805160a081018252600c606082018181526b23b737b9b4b99021b430b4b760a11b60808401528252606460208084019190915283518085018552601b81527f68747470733a2f2f7270632e676e6f736973636861696e2e636f6d0000000000918101919091528284015291516b33b737b9b4b9afb1b430b4b760a11b8152909250600991019081526040519081900360200190208151819062000d00908262000ef8565b50602082015160018201556040820151600282019062000d21908262000ef8565b5090505060007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b0316639d2ad72a6040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000d89573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000db39190810190620010bc565b905060005b815181101562000e4a5781818151811062000dd75762000dd7620011ee565b602002602001015160200151600983838151811062000dfa5762000dfa620011ee565b60200260200101516000015160405162000e15919062001204565b9081526020016040518091039020600201908162000e34919062000ef8565b508062000e418162001222565b91505062000db8565b50600091505090565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168062000e7e57607f821691505b60208210810362000e9f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000ef357600081815260208120601f850160051c8101602086101562000ece5750805b601f850160051c820191505b8181101562000eef5782815560010162000eda565b5050505b505050565b81516001600160401b0381111562000f145762000f1462000e53565b62000f2c8162000f25845462000e69565b8462000ea5565b602080601f83116001811462000f64576000841562000f4b5750858301515b600019600386901b1c1916600185901b17855562000eef565b600085815260208120601f198616915b8281101562000f955788860151825594840194600190910190840162000f74565b508582101562000fb45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604080519081016001600160401b038111828210171562000fe95762000fe962000e53565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200101a576200101a62000e53565b604052919050565b60005b838110156200103f57818101518382015260200162001025565b50506000910152565b600082601f8301126200105a57600080fd5b81516001600160401b0381111562001076576200107662000e53565b6200108b601f8201601f191660200162000fef565b818152846020838601011115620010a157600080fd5b620010b482602083016020870162001022565b949350505050565b60006020808385031215620010d057600080fd5b82516001600160401b0380821115620010e857600080fd5b818501915085601f830112620010fd57600080fd5b81518181111562001112576200111262000e53565b8060051b6200112385820162000fef565b91825283810185019185810190898411156200113e57600080fd5b86860192505b83831015620011e1578251858111156200115e5760008081fd5b86016040818c03601f1901811315620011775760008081fd5b6200118162000fc4565b8983015188811115620011945760008081fd5b620011a48e8c8387010162001048565b825250908201519087821115620011bb5760008081fd5b620011cb8d8b8486010162001048565b818b015284525050918601919086019062001144565b9998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b600082516200121881846020870162001022565b9190910192915050565b6000600182016200124357634e487b7160e01b600052601160045260246000fd5b5060010190565b6125cd806200125a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630a9254e4146100515780635eef12321461005b578063ba414fa614610063578063fa7626d41461007f575b600080fd5b61005961008c565b005b6100596100d7565b61006b610446565b604051901515815260200160405180910390f35b60075461006b9060ff1681565b60405161009890610821565b604051809103906000f0801580156100b4573d6000803e3d6000fd5b50601180546001600160a01b0319166001600160a01b0392909216919091179055565b6100df61082e565b80517f1e1a6fd6fa4907c1f9a14c0e4f7f7b084cb665be6b4f1bdd846a8213228291ca905280517f058e3962e5fca5ceed3271a1f4c44e7304abc60d2e7162a662b8e7f3f5083fbe6020918201526040805180820182527f209d00968e77938ddaaa56eeb738261652544aa688d8502846090413f1e3152d81527f128319844ec9652e69f529672b71005ef527c262e4f18834b07e260a24e5862381840152828401805191909152815180830183527f2123d822a1d4ac866c4fb397010e1d9228f143c9836e11c56f92003b7167614881527f212d6191dcfb56e897f8e6c94b008a5a363b12efca0150bc3e7deabcf328852381850152905183015280830180517f206cddb28a1fd1359f266bc731951fcd2acba276cf11aa9221d3cd3dfe60d9959052517f11eb4225015668817fd7a724d6f4cdf593cf9eaebb5137e4f3cf402443735c989083015280516101008101825260008082527f25b50f972e6f311960bfbc78176157aacee4ed5a45938c2e1b4c0585b44053868285018190527f2df8c0ab66dc3db17505f16c0b53554ee08f3b301a6299fad988b8a8a487e08a83850152600160608401526080830182905260a083015260c0820181905260e0820152601154825163ebf0c71760e01b815292519193610317936001600160a01b039092169263ebf0c7179260048082019392918290030181865afa1580156102ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031091906108b9565b6000610573565b60115460408051606081018252602081018581526001600160a01b0390931692637985746292829190820161034b8761069a565b905290526040516001600160e01b031960e084901b16815261037091906004016108fb565b600060405180830381600087803b15801561038a57600080fd5b505af115801561039e573d6000803e3d6000fd5b50505050610442601160009054906101000a90046001600160a01b03166001600160a01b031663ebf0c7176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041c91906108b9565b7f25b50f972e6f311960bfbc78176157aacee4ed5a45938c2e1b4c0585b4405386610573565b5050565b600754600090610100900460ff16156104685750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561056e5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916104f6917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610a0b565b60408051601f198184030181529082905261051091610a2f565b6000604051808303816000865af19150503d806000811461054d576040519150601f19603f3d011682016040523d82523d6000602084013e610552565b606091505b509150508080602001905181019061056a9190610a42565b9150505b919050565b808214610442577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516105e49060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610442610715565b6040805160088082526101208201909252606091602082016101008036833701905050905060005b600881101561070f578281600881106106dd576106dd610a64565b60200201518282815181106106f4576106f4610a64565b602090810291909101015261070881610a7a565b90506106c2565b50919050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108105760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526107af9291602001610a0b565b60408051601f19818403018152908290526107c991610a2f565b6000604051808303816000865af19150503d8060008114610806576040519150601f19603f3d011682016040523d82523d6000602084013e61080b565b606091505b505050505b6007805461ff001916610100179055565b611af680610aa283390190565b6040805160a08101909152600060608201818152608083019190915281526020810161085861087f565b815260200161087a604051806040016040528060008152602001600081525090565b905290565b604051806040016040528061089261089b565b815260200161087a5b60405180604001604052806002906020820280368337509192915050565b6000602082840312156108cb57600080fd5b5051919050565b8060005b60028110156108f55781518452602093840193909101906001016108d6565b50505050565b602080825260009060408382018185018685805b600180821061091e57506109cd565b601f198a86030186528351610120808701825161094689825180518252602090810151910152565b8b8101516109578c8b0182516108d2565b8c015161096760808b01826108d2565b508a0151805160c08a01526020015160e0890152918a015161010088019190915280519182905289019061014087019085905b808210156109b75783518352928b0192918b01919084019061099a565b505096890196955050509186019160010161090f565b509198975050505050505050565b6000815160005b818110156109fc57602081850181015186830152016109e2565b50600093019283525090919050565b6001600160e01b0319831681526000610a2760048301846109db565b949350505050565b6000610a3b82846109db565b9392505050565b600060208284031215610a5457600080fd5b81518015158114610a3b57600080fd5b634e487b7160e01b600052603260045260246000fd5b600060018201610a9a57634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b50611ad6806100206000396000f3fe60806040526004361061003f5760003560e01c80637985746214610044578063b02c43d014610066578063b6b55f25146100a5578063ebf0c717146100b8575b600080fd5b34801561005057600080fd5b5061006461005f36600461189c565b6100ce565b005b34801561007257600080fd5b506100936100813660046119e3565b60016020526000908152604090205481565b60405190815260200160405180910390f35b6100646100b33660046119e3565b610192565b3480156100c457600080fd5b5061009360005481565b80516020015180516000906100e5576100e56119fc565b60200260200101516000541461010e57604051633ac8d0b760e21b815260040160405180910390fd5b60005b60018110156101495761013982826001811061012f5761012f6119fc565b60200201516101d9565b61014281611a28565b9050610111565b5080610156600180611a41565b60018110610166576101666119fc565b602002015160200151600181518110610181576101816119fc565b602002602001015160008190555050565b346000036101b3576040516355fcd02760e01b815260040160405180910390fd5b600081815260016020526040812080543492906101d1908490611a54565b909155505050565b8060200151516012146101ff57604051637db491eb60e01b815260040160405180910390fd5b6102088161023b565b61021a81602001518260000151610328565b15610238576040516332d7ac2d60e21b815260040160405180910390fd5b50565b60008160200151600281518110610254576102546119fc565b60200260200101519050806000031561032457806001036103035760008260200151600881518110610288576102886119fc565b6020026020010151905060008360200151600c815181106102ab576102ab6119fc565b6020026020010151905081600160008381526020019081526020016000205410156102e95760405163113fd29f60e21b815260040160405180910390fd5b600090815260016020526040902080549190910390555050565b6002811461032457604051637513b90360e01b815260040160405180910390fd5b5050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816103546104ad565b90508060800151518551600161036a9190611a54565b1461037457600080fd5b604080518082019091526000808252602082018190525b865181101561042257838782815181106103a7576103a76119fc565b6020026020010151106103b957600080fd5b61040e8261040985608001518460016103d29190611a54565b815181106103e2576103e26119fc565b60200260200101518a85815181106103fc576103fc6119fc565b602002602001015161102f565b61108d565b91508061041a81611a28565b91505061038b565b5061044b81836080015160008151811061043e5761043e6119fc565b602002602001015161108d565b905061048f85600001518660200151610463846110e3565b85604001516104758a604001516110e3565b60608801518851610485906110e3565b8960200151611182565b61049f57600193505050506104a7565b600093505050505b92915050565b6104b56115ee565b6040805180820182527f22004253f00cd1a64cd6f1303d3ebb3cd12c7c0941c4c09ecf5d3e1008204ab281527f2b9031138d9403cfaed8bc0282eb1ec39f13f3a5b2f55a2e7e4f9ea1cbc4f5126020808301919091529083528151608080820184527f0f30544ddb798f22c9e557137337d58441ae9ad7530faf64647605807b86d03f8285019081527f1b3419c58f9fbe1e58eba7fb69fc115018909e1a45b9592368d758d0c09bddef606080850191909152908352845180860186527f13dcf5a823d85482f929e0a9e9e6a63d066437995334f6c290aec0728b25ed9681527f25fd9e0c09cf68ea4cf9acbe625797c17f1f6ca976bf88de349c0602c6cbe747818601528385015285840192909252835180820185527f067696285961bfa5ab748f3359f08bcf592a5b0cae7508950bf0c4db973b8f678186019081527f058e3d28f22f3710a62cbcf0e0609d54349984db61f82a6b6bf7d164e999dbf9828501528152845180860186527f1bdc33eae4a7cea4e94b634a2a50548e5acc466033b9045d0892927bd5afc2df81527f159f43c482b48ab07356b2a8214ecd6c2ffdcc56bb46a32ee3dc9a9a832792eb818601528185015285850152835190810184527f0772102e0f3278f04cff738427f7df080987dc31369809973d388cc9830d83568185019081527f0d8fa6e12f53bb176b9688ec8036baf460e855705ae0ad50b0599ad8088fc80b828401528152835180850185527f2411774933b5b1ac93501e7ba912597d4db01daed7b9dd9642593537c798feeb81527f2027602d325876d6c7b1a3a659cee0e1e8474c4e9ec77a5d56bbc552b5309769818501528184015290840152815160138082526102808201909352919082015b604080518082019091526000808252602082015281526020019060019003908161073157505060808201908152604080518082019091527f2c88936d73d99c9d64914bb2f93dbd32d574792c66967cdd9e0de58fa8f8c7e981527e69fbadbcf9a9baf393e2e7cfbcc2812af395ab923945954b3692e7f9e3b5cc6020820152905180516000906107c3576107c36119fc565b602002602001018190525060405180604001604052807f0b8cd1da0a614550d33202a5dae797038ad3a0fbc89cdc0162d10c07186a77d181526020017f1b00d8bcd9ad98464c7043bfdd07ab00e53a11bd382a41f192bd5c9dea7deda6815250816080015160018151811061083a5761083a6119fc565b602002602001018190525060405180604001604052807f1e4e46dbf59952f6cda0c16523b17bea95ad3d1002a12bb34bffad406ccf13d381526020017f0d91697fdc114778e7101a96be2233c1b1b17732adbe95783e63aa35591be00881525081608001516002815181106108b1576108b16119fc565b602002602001018190525060405180604001604052807f2c2e462dae75f075d8bbd5859811ef0304bf4337cc61c8604c4202a1dd19984481526020017f12224c6fa30fa2755edaf4ef31de1b8d3a67f81711002351d9c4e5a0a566026d8152508160800151600381518110610928576109286119fc565b602002602001018190525060405180604001604052807f0b34dae17aef7c6469d275d750c5c505f2dd7c3055aab8eb316989d658e1196481526020017f2e803697ac18a886809fede2001fb4ae5f8c4053d979acf7441f7591b5599c8e815250816080015160048151811061099f5761099f6119fc565b602002602001018190525060405180604001604052807f11e4c0d14c50417c36e08142a60269573a5881eda0b067f5e3bb121f258b5cf481526020017f291abc843c5bb2eca7bca2ef084e84c386ed43a978bb169226759423302b28988152508160800151600581518110610a1657610a166119fc565b602002602001018190525060405180604001604052807f2bb2c4e14f5d055e7496e44d0d3b8bc426b2079e67ac6039c8914fb68dc1710781526020017f21413ca0ce6ae8dc235fa3b2a69606b754e0e56ac9ee10eb606f7576ac9bc52c8152508160800151600681518110610a8d57610a8d6119fc565b602002602001018190525060405180604001604052807f0d0aac7ca66d17b7ff012908ab02d9a0f137832ad949a2292f51afa8fa344bbc81526020017f1180af50bf11532f56308e5f63e3626d89882af62fc588d8e7b4b873b6bd13898152508160800151600781518110610b0457610b046119fc565b602002602001018190525060405180604001604052807f158ce71db852340569ffe52087236dcafc30e5cb5605cb8572fce6c0c7ce385c81526020017f0a648d89b3d35a3067705ab4c297030c0006c0c6af8f1684a604a6b541013c4e8152508160800151600881518110610b7b57610b7b6119fc565b602002602001018190525060405180604001604052807f305e9daeb32ea7134b54614b7c89514bf7f4a4ccaa0818fd05b47e16bf8aa93381526020017f2d7a44921597fa4b5f311fc555704dd3a395e47672fbc30fa322e84e7d574ea98152508160800151600981518110610bf257610bf26119fc565b602002602001018190525060405180604001604052807f146b4e9bf5494ecfe968978c466e71ed8f12410891562d964ad6b1d1362d08aa81526020017f205e30e7e33b72c11cc0df6f913239234de6b8a77bee7e95f2f88679adb500358152508160800151600a81518110610c6957610c696119fc565b602002602001018190525060405180604001604052807f1a39ceee6a31a4fc196718617afe6bcde246b7a11b537a9553e360750255cf1081526020017f176fa44ff29799357cd5f351b4de825bac18bca4e5b2038e33ff7b7ba8be45e58152508160800151600b81518110610ce057610ce06119fc565b602002602001018190525060405180604001604052807f0efa01abf163385f4e09925f8ac959a81f78684bd2b80d1655f151996030b4ca81526020017f128b228af95e4bd98c18bd663fc9fa79e953b6c848d17ef87cfff9a05a4bc1a08152508160800151600c81518110610d5757610d576119fc565b602002602001018190525060405180604001604052807f2419d0749e24e80ccc0c9acab5f50016a3ae5606bce213174cf5bdaf2c855d9b81526020017f2862b77b695ca85ee701978bc45538dc5142f02368dcb5084c32839e477b72f78152508160800151600d81518110610dce57610dce6119fc565b602002602001018190525060405180604001604052807f02379d696e3f6d3e589b2c00bab9d0e693e07a3cff1ffe42b3031ce473c1da1981526020017f10da37a17079d6a9d61dd5ec05c1c4c118b31052987eb7fd95ed9567a96c58a98152508160800151600e81518110610e4557610e456119fc565b602002602001018190525060405180604001604052807f1f03cf33a8759b8ac81b4b4aba5bc971aac5d2612272828ff458b11294eb5d0781526020017f29a41c7ba2c28a1170676f4e159c05cf0b70e24e706bf83ea49cdced8ef864068152508160800151600f81518110610ebc57610ebc6119fc565b602002602001018190525060405180604001604052807f133ae86f06c0ddb1cfc0e282849e06571d2e3b8a5692e5e1e60b4b87e81f5b4681526020017f29c2611ca28b649f7a273a1cc20d48991aef5a5828678030122d96aba25426e58152508160800151601081518110610f3357610f336119fc565b602002602001018190525060405180604001604052807f1a4eead82ed7c5319979266bdfec366392aa367cf2888a2057704364b3b2d90781526020017f0fecfb80df7095b471dddd87a3a53946fa8bebba80947db44cd5fdfb8056ca2a8152508160800151601181518110610faa57610faa6119fc565b602002602001018190525060405180604001604052807f1a11379ec03d661bb0a82cb882e8ae5d7596413a29b249820b1fd95bbe68dbd881526020017f2acc5a3fd18a1b63d6308eb90e54fbcce75b2194ae50ad2ab786fab092da205e8152508160800151601281518110611021576110216119fc565b602002602001018190525090565b604080518082019091526000808252602082015261104b61163f565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa9050808061107a57fe5b508061108557600080fd5b505092915050565b60408051808201909152600080825260208201526110a961165d565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa9050808061107a57fe5b604080518082019091526000808252602082015281517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479015801561112a57506020830151155b1561114a5750506040805180820190915260008082526020820152919050565b60405180604001604052808460000151815260200182856020015161116f9190611a67565b6111799084611a41565b90529392505050565b60408051600480825260a08201909252600091829190816020015b604080518082019091526000808252602082015281526020019060019003908161119d57505060408051600480825260a0820190925291925060009190602082015b6111e761167b565b8152602001906001900390816111df5790505090508a82600081518110611210576112106119fc565b6020026020010181905250888260018151811061122f5761122f6119fc565b6020026020010181905250868260028151811061124e5761124e6119fc565b6020026020010181905250848260038151811061126d5761126d6119fc565b6020026020010181905250898160008151811061128c5761128c6119fc565b602002602001018190525087816001815181106112ab576112ab6119fc565b602002602001018190525085816002815181106112ca576112ca6119fc565b602002602001018190525083816003815181106112e9576112e96119fc565b60200260200101819052506112fe828261130d565b9b9a5050505050505050505050565b6000815183511461131d57600080fd5b8251600061132c826006611a89565b905060008167ffffffffffffffff811115611349576113496116dc565b604051908082528060200260200182016040528015611372578160200160208202803683370190505b50905060005b838110156115ad57868181518110611392576113926119fc565b602002602001015160000151828260066113ac9190611a89565b6113b7906000611a54565b815181106113c7576113c76119fc565b6020026020010181815250508681815181106113e5576113e56119fc565b602002602001015160200151828260066113ff9190611a89565b61140a906001611a54565b8151811061141a5761141a6119fc565b602002602001018181525050858181518110611438576114386119fc565b60209081029190910181015151015182611453836006611a89565b61145e906002611a54565b8151811061146e5761146e6119fc565b60200260200101818152505085818151811061148c5761148c6119fc565b60209081029190910101515151826114a5836006611a89565b6114b0906003611a54565b815181106114c0576114c06119fc565b6020026020010181815250508581815181106114de576114de6119fc565b6020026020010151602001516001600281106114fc576114fc6119fc565b60200201518261150d836006611a89565b611518906004611a54565b81518110611528576115286119fc565b602002602001018181525050858181518110611546576115466119fc565b602002602001015160200151600060028110611564576115646119fc565b602002015182611575836006611a89565b611580906005611a54565b81518110611590576115906119fc565b6020908102919091010152806115a581611a28565b915050611378565b506115b66116a0565b6000602082602086026020860160086107d05a03fa905080806115d557fe5b50806115e057600080fd5b505115159695505050505050565b6040805160e08101909152600060a0820181815260c083019190915281526020810161161861167b565b815260200161162561167b565b815260200161163261167b565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b604051806040016040528061168e6116be565b815260200161169b6116be565b905290565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611715576117156116dc565b60405290565b6040516060810167ffffffffffffffff81118282101715611715576117156116dc565b6040516020810167ffffffffffffffff81118282101715611715576117156116dc565b60006040828403121561177357600080fd5b61177b6116f2565b9050813581526020820135602082015292915050565b600082601f8301126117a257600080fd5b6040516040810181811067ffffffffffffffff821117156117c5576117c56116dc565b80604052508060408401858111156117dc57600080fd5b845b818110156117f65780358352602092830192016117de565b509195945050505050565b600082601f83011261181257600080fd5b8135602067ffffffffffffffff8083111561182f5761182f6116dc565b8260051b604051601f19603f83011681018181108482111715611854576118546116dc565b60405293845285810183019383810192508785111561187257600080fd5b83870191505b8482101561189157813583529183019190830190611878565b979650505050505050565b600060208083850312156118af57600080fd5b823567ffffffffffffffff808211156118c757600080fd5b818501915085601f8301126118db57600080fd5b6118e361173e565b80848401888111156118f457600080fd5b845b818110156119d55780358581111561190d57600080fd5b8601808b0361012081121561192157600080fd5b6119296116f2565b6101008083121561193957600080fd5b61194161171b565b61194b8f86611761565b81526080603f19850112156119605760008081fd5b6119686116f2565b93506119778f60408701611791565b84526119868f60808701611791565b8c850152838c82015261199c8f60c08701611761565b604082015282528301359150878211156119b65760008081fd5b6119c28d838501611801565b818b0152865250509286019286016118f6565b509098975050505050505050565b6000602082840312156119f557600080fd5b5035919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600060018201611a3a57611a3a611a12565b5060010190565b818103818111156104a7576104a7611a12565b808201808211156104a7576104a7611a12565b600082611a8457634e487b7160e01b600052601260045260246000fd5b500690565b80820281158282048414176104a7576104a7611a1256fea26469706673582212202567ecdbe1d68cc8f0bf71a61715812aa97715920ed6e93d76627d9bd6c2bfc864736f6c63430008110033a264697066735822122070c797ff229ac9b5b80295bea05475d3d12f9a51918b03d44b74903c453215fd64736f6c6343000811003368747470733a2f2f646174612d736565642d7072656273632d312d73312e62696e616e63652e6f72673a3835343568747470733a2f2f6170692e617661782e6e6574776f726b2f6578742f62632f432f72706368747470733a2f2f6d61696e6e65742e696e667572612e696f2f76332f363737303435346263366561343263353861616331323937383533316239336668747470733a2f2f676f65726c692e696e667572612e696f2f76332f363737303435346263366561343263353861616331323937383533316239336668747470733a2f2f676f65726c692d726f6c6c75702e617262697472756d2e696f2f72706368747470733a2f2f6170692e617661782d746573742e6e6574776f726b2f6578742f62632f432f72706368747470733a2f2f6273632d6461746173656564312e62696e616e63652e6f7267" . parse () . expect ("invalid bytecode")
        });
    pub struct TrollupTest<M>(ethers::contract::Contract<M>);
    impl<M> Clone for TrollupTest<M> {
        fn clone(&self) -> Self {
            TrollupTest(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for TrollupTest<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for TrollupTest<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(TrollupTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> TrollupTest<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), TROLLUPTEST_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                TROLLUPTEST_ABI.clone(),
                TROLLUPTEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testProof1` (0x5eef1232) function"]
        pub fn test_proof_1(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([94, 239, 18, 50], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_1_filter(&self) -> ethers::contract::builders::Event<M, LogArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_2_filter(&self) -> ethers::contract::builders::Event<M, LogArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_3_filter(&self) -> ethers::contract::builders::Event<M, LogArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_1_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_2_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_3_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, TrollupTestEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for TrollupTest<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_array", abi = "log_array(uint256[])")]
    pub struct LogArray1Filter {
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_array", abi = "log_array(int256[])")]
    pub struct LogArray2Filter {
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_array", abi = "log_array(address[])")]
    pub struct LogArray3Filter {
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,uint256[])")]
    pub struct LogNamedArray1Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,int256[])")]
    pub struct LogNamedArray2Filter {
        pub key: String,
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,address[])")]
    pub struct LogNamedArray3Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum TrollupTestEvents {
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogArray1Filter(LogArray1Filter),
        LogArray2Filter(LogArray2Filter),
        LogArray3Filter(LogArray3Filter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedArray1Filter(LogNamedArray1Filter),
        LogNamedArray2Filter(LogNamedArray2Filter),
        LogNamedArray3Filter(LogNamedArray3Filter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for TrollupTestEvents {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogArray1Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogArray1Filter(decoded));
            }
            if let Ok(decoded) = LogArray2Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogArray2Filter(decoded));
            }
            if let Ok(decoded) = LogArray3Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogArray3Filter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedArray1Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedArray1Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray2Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedArray2Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray3Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedArray3Filter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for TrollupTestEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                TrollupTestEvents::LogFilter(element) => element.fmt(f),
                TrollupTestEvents::LogAddressFilter(element) => element.fmt(f),
                TrollupTestEvents::LogArray1Filter(element) => element.fmt(f),
                TrollupTestEvents::LogArray2Filter(element) => element.fmt(f),
                TrollupTestEvents::LogArray3Filter(element) => element.fmt(f),
                TrollupTestEvents::LogBytesFilter(element) => element.fmt(f),
                TrollupTestEvents::LogBytes32Filter(element) => element.fmt(f),
                TrollupTestEvents::LogIntFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedAddressFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedArray1Filter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedArray2Filter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedArray3Filter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedBytesFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedIntFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedStringFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedUintFilter(element) => element.fmt(f),
                TrollupTestEvents::LogStringFilter(element) => element.fmt(f),
                TrollupTestEvents::LogUintFilter(element) => element.fmt(f),
                TrollupTestEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `setUp` function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `testProof1` function with signature `testProof1()` and selector `[94, 239, 18, 50]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "testProof1", abi = "testProof1()")]
    pub struct TestProof1Call;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum TrollupTestCalls {
        IsTest(IsTestCall),
        Failed(FailedCall),
        SetUp(SetUpCall),
        TestProof1(TestProof1Call),
    }
    impl ethers::core::abi::AbiDecode for TrollupTestCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TrollupTestCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TrollupTestCalls::Failed(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TrollupTestCalls::SetUp(decoded));
            }
            if let Ok(decoded) =
                <TestProof1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TrollupTestCalls::TestProof1(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for TrollupTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                TrollupTestCalls::IsTest(element) => element.encode(),
                TrollupTestCalls::Failed(element) => element.encode(),
                TrollupTestCalls::SetUp(element) => element.encode(),
                TrollupTestCalls::TestProof1(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for TrollupTestCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                TrollupTestCalls::IsTest(element) => element.fmt(f),
                TrollupTestCalls::Failed(element) => element.fmt(f),
                TrollupTestCalls::SetUp(element) => element.fmt(f),
                TrollupTestCalls::TestProof1(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsTestCall> for TrollupTestCalls {
        fn from(var: IsTestCall) -> Self {
            TrollupTestCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<FailedCall> for TrollupTestCalls {
        fn from(var: FailedCall) -> Self {
            TrollupTestCalls::Failed(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for TrollupTestCalls {
        fn from(var: SetUpCall) -> Self {
            TrollupTestCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<TestProof1Call> for TrollupTestCalls {
        fn from(var: TestProof1Call) -> Self {
            TrollupTestCalls::TestProof1(var)
        }
    }
    #[doc = "Container type for all return fields from the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct IsTestReturn(pub bool);
    #[doc = "Container type for all return fields from the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct FailedReturn(pub bool);
}
