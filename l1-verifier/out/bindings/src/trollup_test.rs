pub use trollup_test::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod trollup_test {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "TrollupTest was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    # [rustfmt :: skip] const __ABI : & str = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testProof1\",\"outputs\":[]}]" ;
    #[doc = r" The parsed JSON-ABI of the contract."]
    pub static TROLLUPTEST_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers::core::utils::__serde_json::from_str(__ABI).expect("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static TROLLUPTEST_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x60806040526007805460ff191660011790556200001b62000032565b6008553480156200002b57600080fd5b506200124a565b6040805160a08101825260056060820181815264105b9d9a5b60da1b60808401528252617a6960208084019190915283518085018552601581527f687474703a2f2f3132372e302e302e313a3835343500000000000000000000009181019190915282840152915164185b9d9a5b60da1b81526000926009910190815260405190819003602001902081518190620000cb908262000ef8565b506020820151600182015560408201516002820190620000ec908262000ef8565b50506040805160a0810182526007606082018181526612185c991a185d60ca1b60808401528252617a6960208084019190915283518085018552601581527f687474703a2f2f3132372e302e302e313a38353435000000000000000000000091810191909152828401529151661a185c991a185d60ca1b815290925060099101908152604051908190036020019020815181906200018b908262000ef8565b506020820151600182015560408201516002820190620001ac908262000ef8565b5090505060405180606001604052806040518060400160405280600781526020016613585a5b9b995d60ca1b8152508152602001600181526020016040518060600160405280603d8152602001620037ae603d91399052604051661b585a5b9b995d60ca1b81526009906007019081526040519081900360200190208151819062000238908262000ef8565b50602082015160018201556040820151600282019062000259908262000ef8565b50905050604051806060016040528060405180604001604052806006815260200165476f65726c6960d01b8152508152602001600581526020016040518060600160405280603c8152602001620037eb603c9139905260405165676f65726c6960d01b815260099060060190815260405190819003602001902081518190620002e3908262000ef8565b50602082015160018201556040820151600282019062000304908262000ef8565b50506040805160a081018252600760608201818152665365706f6c696160c81b6080840152825262aa36a760208084019190915283518085018552601781527f68747470733a2f2f7270632e7365706f6c69612e64657600000000000000000091810191909152828401529151667365706f6c696160c81b81529092506009910190815260405190819003602001902081518190620003a4908262000ef8565b506020820151600182015560408201516002820190620003c5908262000ef8565b50506040805160a081018252600860608201818152674f7074696d69736d60c01b60808401528252600a60208084019190915283518085018552601b81527f68747470733a2f2f6d61696e6e65742e6f7074696d69736d2e696f000000000091810191909152828401529151676f7074696d69736d60c01b8152909250600991019081526040519081900360200190208151819062000465908262000ef8565b50602082015160018201556040820151600282019062000486908262000ef8565b50506040805160a081018252600f606082018181526e4f7074696d69736d20476f65726c6960881b608084015282526101a460208084019190915283518085018552601a81527f68747470733a2f2f676f65726c692e6f7074696d69736d2e696f000000000000918101919091528284015291516e6f7074696d69736d5f676f65726c6960881b8152909250600991019081526040519081900360200190208151819062000535908262000ef8565b50602082015160018201556040820151600282019062000556908262000ef8565b50506040805160a081018252600c606082018181526b417262697472756d204f6e6560a01b6080840152825261a4b160208084019190915283518085018552601c81527f68747470733a2f2f617262312e617262697472756d2e696f2f72706300000000918101919091528284015291516b617262697472756d5f6f6e6560a01b81529092506009910190815260405190819003602001902081518190620005ff908262000ef8565b50602082015160018201556040820151600282019062000620908262000ef8565b5090505060405180606001604052806040518060400160405280601381526020017f417262697472756d204f6e6520476f65726c6900000000000000000000000000815250815260200162066eed8152602001604051806060016040528060258152602001620038276025913990526040517f617262697472756d5f6f6e655f676f65726c6900000000000000000000000000815260099060130190815260405190819003602001902081518190620006da908262000ef8565b506020820151600182015560408201516002820190620006fb908262000ef8565b50506040805160a081018252600d606082018181526c417262697472756d204e6f766160981b6080840152825261a4ba60208084019190915283518085018552601c81527f68747470733a2f2f6e6f76612e617262697472756d2e696f2f72706300000000918101919091528284015291516c617262697472756d5f6e6f766160981b81529092506009910190815260405190819003602001902081518190620007a6908262000ef8565b506020820151600182015560408201516002820190620007c7908262000ef8565b50506040805160a081018252600760608201818152662837b63cb3b7b760c91b60808401528252608960208084019190915283518085018552601781527f68747470733a2f2f706f6c79676f6e2d7270632e636f6d00000000000000000091810191909152828401529151663837b63cb3b7b760c91b8152909250600991019081526040519081900360200190208151819062000865908262000ef8565b50602082015160018201556040820151600282019062000886908262000ef8565b50506040805160a081018252600e606082018181526d506f6c79676f6e204d756d62616960901b608084015282526201388160208084019190915283518085018552601e81527f68747470733a2f2f7270632d6d756d6261692e6d617469632e746f6461790000918101919091528284015291516d706f6c79676f6e5f6d756d62616960901b8152909250600991019081526040519081900360200190208151819062000934908262000ef8565b50602082015160018201556040820151600282019062000955908262000ef8565b509050506040518060600160405280604051806040016040528060098152602001684176616c616e63686560b81b815250815260200161a86a815260200160405180606001604052806025815260200162003789602591399052604051686176616c616e63686560b81b8152600990810190815260405190819003602001902081518190620009e5908262000ef8565b50602082015160018201556040820151600282019062000a06908262000ef8565b5090505060405180606001604052806040518060400160405280600e81526020016d4176616c616e6368652046756a6960901b815250815260200161a86981526020016040518060600160405280602a81526020016200384c602a913990526040516d6176616c616e6368655f66756a6960901b8152600990600e019081526040519081900360200190208151819062000aa1908262000ef8565b50602082015160018201556040820151600282019062000ac2908262000ef8565b5090505060405180606001604052806040518060400160405280600f81526020016e2127211029b6b0b93a1021b430b4b760891b815250815260200160388152602001604051806060016040528060218152602001620038766021913990526040516e3137312fb9b6b0b93a2fb1b430b4b760891b8152600990600f019081526040519081900360200190208151819062000b5e908262000ef8565b50602082015160018201556040820151600282019062000b7f908262000ef8565b5090505060405180606001604052806040518060400160405280601781526020017f424e4220536d61727420436861696e20546573746e65740000000000000000008152508152602001606181526020016040518060600160405280602e81526020016200375b602e913990526040517f626e625f736d6172745f636861696e5f746573746e657400000000000000000081526009906017019081526040519081900360200190208151819062000c37908262000ef8565b50602082015160018201556040820151600282019062000c58908262000ef8565b50506040805160a081018252600c606082018181526b23b737b9b4b99021b430b4b760a11b60808401528252606460208084019190915283518085018552601b81527f68747470733a2f2f7270632e676e6f736973636861696e2e636f6d0000000000918101919091528284015291516b33b737b9b4b9afb1b430b4b760a11b8152909250600991019081526040519081900360200190208151819062000d00908262000ef8565b50602082015160018201556040820151600282019062000d21908262000ef8565b5090505060007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b0316639d2ad72a6040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000d89573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000db39190810190620010bc565b905060005b815181101562000e4a5781818151811062000dd75762000dd7620011ee565b602002602001015160200151600983838151811062000dfa5762000dfa620011ee565b60200260200101516000015160405162000e15919062001204565b9081526020016040518091039020600201908162000e34919062000ef8565b508062000e418162001222565b91505062000db8565b50600091505090565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168062000e7e57607f821691505b60208210810362000e9f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000ef357600081815260208120601f850160051c8101602086101562000ece5750805b601f850160051c820191505b8181101562000eef5782815560010162000eda565b5050505b505050565b81516001600160401b0381111562000f145762000f1462000e53565b62000f2c8162000f25845462000e69565b8462000ea5565b602080601f83116001811462000f64576000841562000f4b5750858301515b600019600386901b1c1916600185901b17855562000eef565b600085815260208120601f198616915b8281101562000f955788860151825594840194600190910190840162000f74565b508582101562000fb45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604080519081016001600160401b038111828210171562000fe95762000fe962000e53565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200101a576200101a62000e53565b604052919050565b60005b838110156200103f57818101518382015260200162001025565b50506000910152565b600082601f8301126200105a57600080fd5b81516001600160401b0381111562001076576200107662000e53565b6200108b601f8201601f191660200162000fef565b818152846020838601011115620010a157600080fd5b620010b482602083016020870162001022565b949350505050565b60006020808385031215620010d057600080fd5b82516001600160401b0380821115620010e857600080fd5b818501915085601f830112620010fd57600080fd5b81518181111562001112576200111262000e53565b8060051b6200112385820162000fef565b91825283810185019185810190898411156200113e57600080fd5b86860192505b83831015620011e1578251858111156200115e5760008081fd5b86016040818c03601f1901811315620011775760008081fd5b6200118162000fc4565b8983015188811115620011945760008081fd5b620011a48e8c8387010162001048565b825250908201519087821115620011bb5760008081fd5b620011cb8d8b8486010162001048565b818b015284525050918601919086019062001144565b9998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b600082516200121881846020870162001022565b9190910192915050565b6000600182016200124357634e487b7160e01b600052601160045260246000fd5b5060010190565b612501806200125a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630a9254e4146100515780635eef12321461005b578063ba414fa614610063578063fa7626d41461007f575b600080fd5b61005961008c565b005b6100596100d7565b61006b610446565b604051901515815260200160405180910390f35b60075461006b9060ff1681565b60405161009890610821565b604051809103906000f0801580156100b4573d6000803e3d6000fd5b50601180546001600160a01b0319166001600160a01b0392909216919091179055565b6100df61082e565b80517f1e1a6fd6fa4907c1f9a14c0e4f7f7b084cb665be6b4f1bdd846a8213228291ca905280517f058e3962e5fca5ceed3271a1f4c44e7304abc60d2e7162a662b8e7f3f5083fbe6020918201526040805180820182527f209d00968e77938ddaaa56eeb738261652544aa688d8502846090413f1e3152d81527f128319844ec9652e69f529672b71005ef527c262e4f18834b07e260a24e5862381840152828401805191909152815180830183527f2123d822a1d4ac866c4fb397010e1d9228f143c9836e11c56f92003b7167614881527f212d6191dcfb56e897f8e6c94b008a5a363b12efca0150bc3e7deabcf328852381850152905183015280830180517f206cddb28a1fd1359f266bc731951fcd2acba276cf11aa9221d3cd3dfe60d9959052517f11eb4225015668817fd7a724d6f4cdf593cf9eaebb5137e4f3cf402443735c989083015280516101008101825260008082527f25b50f972e6f311960bfbc78176157aacee4ed5a45938c2e1b4c0585b44053868285018190527f2df8c0ab66dc3db17505f16c0b53554ee08f3b301a6299fad988b8a8a487e08a83850152600160608401526080830182905260a083015260c0820181905260e0820152601154825163ebf0c71760e01b815292519193610317936001600160a01b039092169263ebf0c7179260048082019392918290030181865afa1580156102ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031091906108b9565b6000610573565b60115460408051606081018252602081018581526001600160a01b0390931692637985746292829190820161034b8761069a565b905290526040516001600160e01b031960e084901b16815261037091906004016108fb565b600060405180830381600087803b15801561038a57600080fd5b505af115801561039e573d6000803e3d6000fd5b50505050610442601160009054906101000a90046001600160a01b03166001600160a01b031663ebf0c7176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041c91906108b9565b7f25b50f972e6f311960bfbc78176157aacee4ed5a45938c2e1b4c0585b4405386610573565b5050565b600754600090610100900460ff16156104685750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561056e5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916104f6917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610a0b565b60408051601f198184030181529082905261051091610a2f565b6000604051808303816000865af19150503d806000811461054d576040519150601f19603f3d011682016040523d82523d6000602084013e610552565b606091505b509150508080602001905181019061056a9190610a42565b9150505b919050565b808214610442577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516105e49060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610442610715565b6040805160088082526101208201909252606091602082016101008036833701905050905060005b600881101561070f578281600881106106dd576106dd610a64565b60200201518282815181106106f4576106f4610a64565b602090810291909101015261070881610a7a565b90506106c2565b50919050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108105760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526107af9291602001610a0b565b60408051601f19818403018152908290526107c991610a2f565b6000604051808303816000865af19150503d8060008114610806576040519150601f19603f3d011682016040523d82523d6000602084013e61080b565b606091505b505050505b6007805461ff001916610100179055565b611a2a80610aa283390190565b6040805160a08101909152600060608201818152608083019190915281526020810161085861087f565b815260200161087a604051806040016040528060008152602001600081525090565b905290565b604051806040016040528061089261089b565b815260200161087a5b60405180604001604052806002906020820280368337509192915050565b6000602082840312156108cb57600080fd5b5051919050565b8060005b60028110156108f55781518452602093840193909101906001016108d6565b50505050565b602080825260009060408382018185018685805b600180821061091e57506109cd565b601f198a86030186528351610120808701825161094689825180518252602090810151910152565b8b8101516109578c8b0182516108d2565b8c015161096760808b01826108d2565b508a0151805160c08a01526020015160e0890152918a015161010088019190915280519182905289019061014087019085905b808210156109b75783518352928b0192918b01919084019061099a565b505096890196955050509186019160010161090f565b509198975050505050505050565b6000815160005b818110156109fc57602081850181015186830152016109e2565b50600093019283525090919050565b6001600160e01b0319831681526000610a2760048301846109db565b949350505050565b6000610a3b82846109db565b9392505050565b600060208284031215610a5457600080fd5b81518015158114610a3b57600080fd5b634e487b7160e01b600052603260045260246000fd5b600060018201610a9a57634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b50611a0a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063798574621461003b578063ebf0c71714610050575b600080fd5b61004e6100493660046117e9565b61006b565b005b61005960005481565b60405190815260200160405180910390f35b805160200151805160009061008257610082611930565b6020026020010151600054146100ab57604051633ac8d0b760e21b815260040160405180910390fd5b60005b60018110156100e6576100d68282600181106100cc576100cc611930565b602002015161012f565b6100df8161195c565b90506100ae565b50806100f3600180611975565b6001811061010357610103611930565b60200201516020015160018151811061011e5761011e611930565b602002602001015160008190555050565b80602001515160141461015557604051637db491eb60e01b815260040160405180910390fd5b61016781602001518260000151610188565b15610185576040516332d7ac2d60e21b815260040160405180910390fd5b50565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816101b461030d565b9050806080015151855160016101ca9190611988565b146101d457600080fd5b604080518082019091526000808252602082018190525b8651811015610282578387828151811061020757610207611930565b60200260200101511061021957600080fd5b61026e8261026985608001518460016102329190611988565b8151811061024257610242611930565b60200260200101518a858151811061025c5761025c611930565b6020026020010151610f7c565b610fda565b91508061027a8161195c565b9150506101eb565b506102ab81836080015160008151811061029e5761029e611930565b6020026020010151610fda565b90506102ef856000015186602001516102c384611030565b85604001516102d58a60400151611030565b606088015188516102e590611030565b89602001516110cf565b6102ff5760019350505050610307565b600093505050505b92915050565b61031561153b565b6040805180820182527f290f8bb5d79d6d0dbe1c03ca1011fa9b0b7c6ecda13f37cfba658a4907183e8281527f01bdd72ab2502e44350a2c689656a181d6b4296b8d5166e8985cf791214cb5dd6020808301919091529083528151608080820184527f2097d33038a83c026f6368e2a92256591f4c2e1e4f434bc9bfb78a4f63e8d6da8285019081527f288c98376de73cd6fc6244cd2f922dd5d67389b6d98ecc5a8678cec63fa33699606080850191909152908352845180860186527f0cadbda639bd8c91b3da3d95a0ad0d16c5ed6bbefe4239e10df63a44fe9dc7fa81527f0a20619d0ebf2d01922725e4636dc59f6399f23bd92f641ccac6495f4707c59a818601528385015285840192909252835180820185527f1699b936b058af6b03c0875a819c79f7efe5cc124e27e9b1795e0ae99f0eb17b8186019081527f2d8e4ab909054c94d10faf0a9838d101307578438eff38336640ce8292297be1828501528152845180860186527f0ceadc89b0d21f6881e47d23c19a89d4ddf3bfd00d0a1f70cc97d35779b37c8681527f0335b618b04cfeffae49902bfd90b27473f5185b0875facaa446ec96c4c427f6818601528185015285850152835190810184527f20c7bd11eb26046af5aaba82e57671bc5a96381e89577d120ff7e83cdeffa5528185019081527f2b2a2bf9ee96069bb2d09f01ddab62728b65c37e932d5a6f5fd6b488c99785b7828401528152835180850185527f15d299ea897bbe8777e50a221570e48bedc74c76f0378f6a4ec5856cc9f36ec581527f0368a9236c577309e63b0581be044d231a934e37c9ef3ed339e7cd398e0ea776818501528184015290840152815160158082526102c08201909352919082015b604080518082019091526000808252602082015281526020019060019003908161059157505060808201908152604080518082019091527f26428f1cc3497817783af1b2bbf9307742be492cbc3f39ef8c4639844b62eb2081527f2b7ceba4863591b34957f4a286ecb47d4917d4991789835431f0dcb16bac093060208201529051805160009061062457610624611930565b602002602001018190525060405180604001604052807f0b876906484105f0ba685cf120171e4e6f1b8087b6ab097de676f441b073de8681526020017f2b8ab2b876a2ca288e6cc97e5c396d69504ffd4e716d39e140dad48acfe3bf9b815250816080015160018151811061069b5761069b611930565b602002602001018190525060405180604001604052807f0ecb31ec1f0a6f5b085babcc0921e5c4683af0b9dc5e16f1d7761de291d48d6881526020017f28d1202dff883363d90ef693bf1f5672e43de0dcb364a0ca0d6c7c2d5e4e735a815250816080015160028151811061071257610712611930565b602002602001018190525060405180604001604052807f0c162682fa1477599be6334337ddc979c28d8a3a1dd18edbb5731699ce96237281526020017f2c922f58408b2b1d04306262ecd018810272a9abda833e3e9e64e71185bca297815250816080015160038151811061078957610789611930565b602002602001018190525060405180604001604052807f1b97c31415496279a71c1ee0c1c4a5f5a30b9818e95447b60c9b452a1dec5eb781526020017f21ff09cece580082abb3699979c6f40dc05ed3437218e026f43962cc88e8f43a815250816080015160048151811061080057610800611930565b602002602001018190525060405180604001604052807f1fd2d912092d81e9b234417ff59392701a1296764bcdee079f8d144a120ffbd681526020017f13c6f6a981ec443978ca844e396bbed8065aac15a75c2fd02a2f96e47fbf24bb815250816080015160058151811061087757610877611930565b602002602001018190525060405180604001604052807e43e53e8692422e2e44f142ff4aaf54e53db43e55804e397e022ac3c5cecf0381526020017ee79de0cc7688636e59a8fbd0e67b138fbb84df19513e74675ddec279b18fb481525081608001516006815181106108ec576108ec611930565b602002602001018190525060405180604001604052807f1ac610f7bfa3fd301f668401c39e4ed65f0cfb7c7726cb1fd95aadf7e84b434881526020017f2115d4a0c0aa5ebfc44c4a42b549b5262374037f8c9f76333429639f52577a31815250816080015160078151811061096357610963611930565b602002602001018190525060405180604001604052807f2f6aa182bc65cac0c5e5f21f03f474ce44cbb5fad370c4b584063b3fc517c5fe81526020017f1b0c97e9c968beab6a66c9b81188328a286b3858b345186af759a17cde8e7c3f81525081608001516008815181106109da576109da611930565b602002602001018190525060405180604001604052807f0740f4076838085a6183a7cdebd811f24932c6dc041eaf7481fbe23d8166768781526020017f25e52414c179e1c77b62b5681f402e301a1c120faf66bfbc5d97e10a963cdc118152508160800151600981518110610a5157610a51611930565b602002602001018190525060405180604001604052807f0844d8c2856eb58c5058fac08689f57716655e6b36346d6ea137e27b1aafc0c481526020017f2d05eaa47be44f41c3b645882e640ca4453b1b2e58ff03910498086af64488528152508160800151600a81518110610ac857610ac8611930565b602002602001018190525060405180604001604052807f28cd6042b707cc8f32f2a1fb2e4bdbc7ff17cb5468a12ebadb71af1c27a5fbfe81526020017f28c4395b18c54f664dad47398b8913580192ae06fdd01ec0e63fd146ce26b2698152508160800151600b81518110610b3f57610b3f611930565b602002602001018190525060405180604001604052807f186d5236f22221b2656360e6ff5fb420f54ffa539b4df86161bc11919924f96d81526020017f2dacbcdabd151b9076c34b5d63dddce80c36a34dc013f6bd17ec2f29987782838152508160800151600c81518110610bb657610bb6611930565b602002602001018190525060405180604001604052807f236f5fa8d339fd32b71b44b88b596c1013e4f527700b566429c81c625392ed7481526020017f0413e46bab46a6e337c8b91e4a516705dd48bba14eb6cdc91573684e57b55cdc8152508160800151600d81518110610c2d57610c2d611930565b602002602001018190525060405180604001604052807f162e6a98a3aef486b657224a2734a9dce051ca497571b306baa916752a07496181526020017f1f184e0c901decb679cf320bcdc27be65c3897c0d0f34c81828a28a81007c44a8152508160800151600e81518110610ca457610ca4611930565b602002602001018190525060405180604001604052807f267e86e0864ab82d3d4f1b942ba1b4463dca76095f63b33f88d18ceb2a2f752e81526020017f21e125ba61a642342157a41c4aa077a9ce60a64a584bddf25bce720aac72e3018152508160800151600f81518110610d1b57610d1b611930565b602002602001018190525060405180604001604052807f2145f45f569d56390aa4579420c41727a29cbc8bdefd9f0fc9baf07472f6f9de81526020017f254546e2d86527ce3a10f8df73f2e44b61085b7831bd776f68ef234c2649300a8152508160800151601081518110610d9257610d92611930565b602002602001018190525060405180604001604052807f2671263de6756f7c6d714a75480b9d060b4efd3fccc5d2229830396410f384a181526020017f24f452bc36bbadc749643279a25c9dde72a5d95a1efc2e677a1738549ca284988152508160800151601181518110610e0957610e09611930565b602002602001018190525060405180604001604052807f2dfc8e1ed39f5d65e80298d10a65d154d5f0621368eddd81a0cdeeb419d084fc81526020017f25117c0d88687d8057e88d89f2c53aa2185795daf5025e6737dd6d81e687ede78152508160800151601281518110610e8057610e80611930565b602002602001018190525060405180604001604052807f181593ed30e38be05aac78d84dad1bb15ac222c234b505fa524bf605fcfa43ae81526020017f0ce9a2e123a9101f22b063678459d44e58574889348caaf8815fa1d146c531e68152508160800151601381518110610ef757610ef7611930565b602002602001018190525060405180604001604052807f11f37bf7bb920da5c220da0c865052d021e4bfc35ae5c46ebf26aea6952fbe4381526020017f2df9ac6050451c357616fb3964fedbc796dab1dc40fb565f8de5976dea5fa93d8152508160800151601481518110610f6e57610f6e611930565b602002602001018190525090565b6040805180820190915260008082526020820152610f9861158c565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa90508080610fc757fe5b5080610fd257600080fd5b505092915050565b6040805180820190915260008082526020820152610ff66115aa565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa90508080610fc757fe5b604080518082019091526000808252602082015281517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479015801561107757506020830151155b156110975750506040805180820190915260008082526020820152919050565b6040518060400160405280846000015181526020018285602001516110bc919061199b565b6110c69084611975565b90529392505050565b60408051600480825260a08201909252600091829190816020015b60408051808201909152600080825260208201528152602001906001900390816110ea57505060408051600480825260a0820190925291925060009190602082015b6111346115c8565b81526020019060019003908161112c5790505090508a8260008151811061115d5761115d611930565b6020026020010181905250888260018151811061117c5761117c611930565b6020026020010181905250868260028151811061119b5761119b611930565b602002602001018190525084826003815181106111ba576111ba611930565b602002602001018190525089816000815181106111d9576111d9611930565b602002602001018190525087816001815181106111f8576111f8611930565b6020026020010181905250858160028151811061121757611217611930565b6020026020010181905250838160038151811061123657611236611930565b602002602001018190525061124b828261125a565b9b9a5050505050505050505050565b6000815183511461126a57600080fd5b825160006112798260066119bd565b905060008167ffffffffffffffff81111561129657611296611629565b6040519080825280602002602001820160405280156112bf578160200160208202803683370190505b50905060005b838110156114fa578681815181106112df576112df611930565b602002602001015160000151828260066112f991906119bd565b611304906000611988565b8151811061131457611314611930565b60200260200101818152505086818151811061133257611332611930565b6020026020010151602001518282600661134c91906119bd565b611357906001611988565b8151811061136757611367611930565b60200260200101818152505085818151811061138557611385611930565b602090810291909101810151510151826113a08360066119bd565b6113ab906002611988565b815181106113bb576113bb611930565b6020026020010181815250508581815181106113d9576113d9611930565b60209081029190910101515151826113f28360066119bd565b6113fd906003611988565b8151811061140d5761140d611930565b60200260200101818152505085818151811061142b5761142b611930565b60200260200101516020015160016002811061144957611449611930565b60200201518261145a8360066119bd565b611465906004611988565b8151811061147557611475611930565b60200260200101818152505085818151811061149357611493611930565b6020026020010151602001516000600281106114b1576114b1611930565b6020020151826114c28360066119bd565b6114cd906005611988565b815181106114dd576114dd611930565b6020908102919091010152806114f28161195c565b9150506112c5565b506115036115ed565b6000602082602086026020860160086107d05a03fa9050808061152257fe5b508061152d57600080fd5b505115159695505050505050565b6040805160e08101909152600060a0820181815260c08301919091528152602081016115656115c8565b81526020016115726115c8565b815260200161157f6115c8565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806115db61160b565b81526020016115e861160b565b905290565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561166257611662611629565b60405290565b6040516060810167ffffffffffffffff8111828210171561166257611662611629565b6040516020810167ffffffffffffffff8111828210171561166257611662611629565b6000604082840312156116c057600080fd5b6116c861163f565b9050813581526020820135602082015292915050565b600082601f8301126116ef57600080fd5b6040516040810181811067ffffffffffffffff8211171561171257611712611629565b806040525080604084018581111561172957600080fd5b845b8181101561174357803583526020928301920161172b565b509195945050505050565b600082601f83011261175f57600080fd5b8135602067ffffffffffffffff8083111561177c5761177c611629565b8260051b604051601f19603f830116810181811084821117156117a1576117a1611629565b6040529384528581018301938381019250878511156117bf57600080fd5b83870191505b848210156117de578135835291830191908301906117c5565b979650505050505050565b600060208083850312156117fc57600080fd5b823567ffffffffffffffff8082111561181457600080fd5b818501915085601f83011261182857600080fd5b61183061168b565b808484018881111561184157600080fd5b845b818110156119225780358581111561185a57600080fd5b8601808b0361012081121561186e57600080fd5b61187661163f565b6101008083121561188657600080fd5b61188e611668565b6118988f866116ae565b81526080603f19850112156118ad5760008081fd5b6118b561163f565b93506118c48f604087016116de565b84526118d38f608087016116de565b8c850152838c8201526118e98f60c087016116ae565b604082015282528301359150878211156119035760008081fd5b61190f8d83850161174e565b818b015286525050928601928601611843565b509098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161196e5761196e611946565b5060010190565b8181038181111561030757610307611946565b8082018082111561030757610307611946565b6000826119b857634e487b7160e01b600052601260045260246000fd5b500690565b80820281158282048414176103075761030761194656fea2646970667358221220708c3beed0a471b9ebef2f76df63678a68b14ee026b98a46e67cd1b954b4dc6d64736f6c63430008110033a264697066735822122071d817646a45f5f2f79db768fdd33f3d802d0f1ccea55bf7abcf2bfdaae7982b64736f6c6343000811003368747470733a2f2f646174612d736565642d7072656273632d312d73312e62696e616e63652e6f72673a3835343568747470733a2f2f6170692e617661782e6e6574776f726b2f6578742f62632f432f72706368747470733a2f2f6d61696e6e65742e696e667572612e696f2f76332f363737303435346263366561343263353861616331323937383533316239336668747470733a2f2f676f65726c692e696e667572612e696f2f76332f363737303435346263366561343263353861616331323937383533316239336668747470733a2f2f676f65726c692d726f6c6c75702e617262697472756d2e696f2f72706368747470733a2f2f6170692e617661782d746573742e6e6574776f726b2f6578742f62632f432f72706368747470733a2f2f6273632d6461746173656564312e62696e616e63652e6f7267" . parse () . expect ("invalid bytecode")
        });
    pub struct TrollupTest<M>(ethers::contract::Contract<M>);
    impl<M> Clone for TrollupTest<M> {
        fn clone(&self) -> Self {
            TrollupTest(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for TrollupTest<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for TrollupTest<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(TrollupTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> TrollupTest<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), TROLLUPTEST_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                TROLLUPTEST_ABI.clone(),
                TROLLUPTEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testProof1` (0x5eef1232) function"]
        pub fn test_proof_1(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([94, 239, 18, 50], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_1_filter(&self) -> ethers::contract::builders::Event<M, LogArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_2_filter(&self) -> ethers::contract::builders::Event<M, LogArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_3_filter(&self) -> ethers::contract::builders::Event<M, LogArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_1_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_2_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_3_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, TrollupTestEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for TrollupTest<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_array", abi = "log_array(uint256[])")]
    pub struct LogArray1Filter {
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_array", abi = "log_array(int256[])")]
    pub struct LogArray2Filter {
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_array", abi = "log_array(address[])")]
    pub struct LogArray3Filter {
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,uint256[])")]
    pub struct LogNamedArray1Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,int256[])")]
    pub struct LogNamedArray2Filter {
        pub key: String,
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,address[])")]
    pub struct LogNamedArray3Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum TrollupTestEvents {
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogArray1Filter(LogArray1Filter),
        LogArray2Filter(LogArray2Filter),
        LogArray3Filter(LogArray3Filter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedArray1Filter(LogNamedArray1Filter),
        LogNamedArray2Filter(LogNamedArray2Filter),
        LogNamedArray3Filter(LogNamedArray3Filter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for TrollupTestEvents {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogArray1Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogArray1Filter(decoded));
            }
            if let Ok(decoded) = LogArray2Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogArray2Filter(decoded));
            }
            if let Ok(decoded) = LogArray3Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogArray3Filter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedArray1Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedArray1Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray2Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedArray2Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray3Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedArray3Filter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for TrollupTestEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                TrollupTestEvents::LogFilter(element) => element.fmt(f),
                TrollupTestEvents::LogAddressFilter(element) => element.fmt(f),
                TrollupTestEvents::LogArray1Filter(element) => element.fmt(f),
                TrollupTestEvents::LogArray2Filter(element) => element.fmt(f),
                TrollupTestEvents::LogArray3Filter(element) => element.fmt(f),
                TrollupTestEvents::LogBytesFilter(element) => element.fmt(f),
                TrollupTestEvents::LogBytes32Filter(element) => element.fmt(f),
                TrollupTestEvents::LogIntFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedAddressFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedArray1Filter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedArray2Filter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedArray3Filter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedBytesFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedIntFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedStringFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedUintFilter(element) => element.fmt(f),
                TrollupTestEvents::LogStringFilter(element) => element.fmt(f),
                TrollupTestEvents::LogUintFilter(element) => element.fmt(f),
                TrollupTestEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `setUp` function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `testProof1` function with signature `testProof1()` and selector `[94, 239, 18, 50]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "testProof1", abi = "testProof1()")]
    pub struct TestProof1Call;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum TrollupTestCalls {
        IsTest(IsTestCall),
        Failed(FailedCall),
        SetUp(SetUpCall),
        TestProof1(TestProof1Call),
    }
    impl ethers::core::abi::AbiDecode for TrollupTestCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TrollupTestCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TrollupTestCalls::Failed(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TrollupTestCalls::SetUp(decoded));
            }
            if let Ok(decoded) =
                <TestProof1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TrollupTestCalls::TestProof1(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for TrollupTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                TrollupTestCalls::IsTest(element) => element.encode(),
                TrollupTestCalls::Failed(element) => element.encode(),
                TrollupTestCalls::SetUp(element) => element.encode(),
                TrollupTestCalls::TestProof1(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for TrollupTestCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                TrollupTestCalls::IsTest(element) => element.fmt(f),
                TrollupTestCalls::Failed(element) => element.fmt(f),
                TrollupTestCalls::SetUp(element) => element.fmt(f),
                TrollupTestCalls::TestProof1(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsTestCall> for TrollupTestCalls {
        fn from(var: IsTestCall) -> Self {
            TrollupTestCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<FailedCall> for TrollupTestCalls {
        fn from(var: FailedCall) -> Self {
            TrollupTestCalls::Failed(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for TrollupTestCalls {
        fn from(var: SetUpCall) -> Self {
            TrollupTestCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<TestProof1Call> for TrollupTestCalls {
        fn from(var: TestProof1Call) -> Self {
            TrollupTestCalls::TestProof1(var)
        }
    }
    #[doc = "Container type for all return fields from the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct IsTestReturn(pub bool);
    #[doc = "Container type for all return fields from the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct FailedReturn(pub bool);
}
