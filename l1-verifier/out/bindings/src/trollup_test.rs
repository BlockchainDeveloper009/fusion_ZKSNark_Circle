pub use trollup_test::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod trollup_test {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "TrollupTest was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    # [rustfmt :: skip] const __ABI : & str = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address\",\"name\":\"val\",\"type\":\"address\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_address\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256[]\",\"name\":\"val\",\"type\":\"uint256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256[]\",\"name\":\"val\",\"type\":\"int256[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"address[]\",\"name\":\"val\",\"type\":\"address[]\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_array\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes\",\"name\":\"val\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"bytes32\",\"name\":\"val\",\"type\":\"bytes32\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_bytes32\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_decimal_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"int256\",\"name\":\"val\",\"type\":\"int256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_int\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"string\",\"name\":\"val\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\",\"components\":[],\"indexed\":false},{\"internalType\":\"uint256\",\"name\":\"val\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_named_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_string\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"log_uint\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\",\"components\":[],\"indexed\":false}],\"type\":\"event\",\"name\":\"logs\",\"outputs\":[],\"anonymous\":false},{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"IS_TEST\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"failed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\",\"components\":[]}]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"setUp\",\"outputs\":[]},{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"testProof1\",\"outputs\":[]}]" ;
    #[doc = r" The parsed JSON-ABI of the contract."]
    pub static TROLLUPTEST_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers::core::utils::__serde_json::from_str(__ABI).expect("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static TROLLUPTEST_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x60806040526007805460ff191660011790556200001b62000032565b6008553480156200002b57600080fd5b506200124a565b6040805160a08101825260056060820181815264105b9d9a5b60da1b60808401528252617a6960208084019190915283518085018552601581527f687474703a2f2f3132372e302e302e313a3835343500000000000000000000009181019190915282840152915164185b9d9a5b60da1b81526000926009910190815260405190819003602001902081518190620000cb908262000ef8565b506020820151600182015560408201516002820190620000ec908262000ef8565b50506040805160a0810182526007606082018181526612185c991a185d60ca1b60808401528252617a6960208084019190915283518085018552601581527f687474703a2f2f3132372e302e302e313a38353435000000000000000000000091810191909152828401529151661a185c991a185d60ca1b815290925060099101908152604051908190036020019020815181906200018b908262000ef8565b506020820151600182015560408201516002820190620001ac908262000ef8565b5090505060405180606001604052806040518060400160405280600781526020016613585a5b9b995d60ca1b8152508152602001600181526020016040518060600160405280603d815260200162003773603d91399052604051661b585a5b9b995d60ca1b81526009906007019081526040519081900360200190208151819062000238908262000ef8565b50602082015160018201556040820151600282019062000259908262000ef8565b50905050604051806060016040528060405180604001604052806006815260200165476f65726c6960d01b8152508152602001600581526020016040518060600160405280603c8152602001620037b0603c9139905260405165676f65726c6960d01b815260099060060190815260405190819003602001902081518190620002e3908262000ef8565b50602082015160018201556040820151600282019062000304908262000ef8565b50506040805160a081018252600760608201818152665365706f6c696160c81b6080840152825262aa36a760208084019190915283518085018552601781527f68747470733a2f2f7270632e7365706f6c69612e64657600000000000000000091810191909152828401529151667365706f6c696160c81b81529092506009910190815260405190819003602001902081518190620003a4908262000ef8565b506020820151600182015560408201516002820190620003c5908262000ef8565b50506040805160a081018252600860608201818152674f7074696d69736d60c01b60808401528252600a60208084019190915283518085018552601b81527f68747470733a2f2f6d61696e6e65742e6f7074696d69736d2e696f000000000091810191909152828401529151676f7074696d69736d60c01b8152909250600991019081526040519081900360200190208151819062000465908262000ef8565b50602082015160018201556040820151600282019062000486908262000ef8565b50506040805160a081018252600f606082018181526e4f7074696d69736d20476f65726c6960881b608084015282526101a460208084019190915283518085018552601a81527f68747470733a2f2f676f65726c692e6f7074696d69736d2e696f000000000000918101919091528284015291516e6f7074696d69736d5f676f65726c6960881b8152909250600991019081526040519081900360200190208151819062000535908262000ef8565b50602082015160018201556040820151600282019062000556908262000ef8565b50506040805160a081018252600c606082018181526b417262697472756d204f6e6560a01b6080840152825261a4b160208084019190915283518085018552601c81527f68747470733a2f2f617262312e617262697472756d2e696f2f72706300000000918101919091528284015291516b617262697472756d5f6f6e6560a01b81529092506009910190815260405190819003602001902081518190620005ff908262000ef8565b50602082015160018201556040820151600282019062000620908262000ef8565b5090505060405180606001604052806040518060400160405280601381526020017f417262697472756d204f6e6520476f65726c6900000000000000000000000000815250815260200162066eed8152602001604051806060016040528060258152602001620037ec6025913990526040517f617262697472756d5f6f6e655f676f65726c6900000000000000000000000000815260099060130190815260405190819003602001902081518190620006da908262000ef8565b506020820151600182015560408201516002820190620006fb908262000ef8565b50506040805160a081018252600d606082018181526c417262697472756d204e6f766160981b6080840152825261a4ba60208084019190915283518085018552601c81527f68747470733a2f2f6e6f76612e617262697472756d2e696f2f72706300000000918101919091528284015291516c617262697472756d5f6e6f766160981b81529092506009910190815260405190819003602001902081518190620007a6908262000ef8565b506020820151600182015560408201516002820190620007c7908262000ef8565b50506040805160a081018252600760608201818152662837b63cb3b7b760c91b60808401528252608960208084019190915283518085018552601781527f68747470733a2f2f706f6c79676f6e2d7270632e636f6d00000000000000000091810191909152828401529151663837b63cb3b7b760c91b8152909250600991019081526040519081900360200190208151819062000865908262000ef8565b50602082015160018201556040820151600282019062000886908262000ef8565b50506040805160a081018252600e606082018181526d506f6c79676f6e204d756d62616960901b608084015282526201388160208084019190915283518085018552601e81527f68747470733a2f2f7270632d6d756d6261692e6d617469632e746f6461790000918101919091528284015291516d706f6c79676f6e5f6d756d62616960901b8152909250600991019081526040519081900360200190208151819062000934908262000ef8565b50602082015160018201556040820151600282019062000955908262000ef8565b509050506040518060600160405280604051806040016040528060098152602001684176616c616e63686560b81b815250815260200161a86a81526020016040518060600160405280602581526020016200374e602591399052604051686176616c616e63686560b81b8152600990810190815260405190819003602001902081518190620009e5908262000ef8565b50602082015160018201556040820151600282019062000a06908262000ef8565b5090505060405180606001604052806040518060400160405280600e81526020016d4176616c616e6368652046756a6960901b815250815260200161a86981526020016040518060600160405280602a815260200162003811602a913990526040516d6176616c616e6368655f66756a6960901b8152600990600e019081526040519081900360200190208151819062000aa1908262000ef8565b50602082015160018201556040820151600282019062000ac2908262000ef8565b5090505060405180606001604052806040518060400160405280600f81526020016e2127211029b6b0b93a1021b430b4b760891b8152508152602001603881526020016040518060600160405280602181526020016200383b6021913990526040516e3137312fb9b6b0b93a2fb1b430b4b760891b8152600990600f019081526040519081900360200190208151819062000b5e908262000ef8565b50602082015160018201556040820151600282019062000b7f908262000ef8565b5090505060405180606001604052806040518060400160405280601781526020017f424e4220536d61727420436861696e20546573746e65740000000000000000008152508152602001606181526020016040518060600160405280602e815260200162003720602e913990526040517f626e625f736d6172745f636861696e5f746573746e657400000000000000000081526009906017019081526040519081900360200190208151819062000c37908262000ef8565b50602082015160018201556040820151600282019062000c58908262000ef8565b50506040805160a081018252600c606082018181526b23b737b9b4b99021b430b4b760a11b60808401528252606460208084019190915283518085018552601b81527f68747470733a2f2f7270632e676e6f736973636861696e2e636f6d0000000000918101919091528284015291516b33b737b9b4b9afb1b430b4b760a11b8152909250600991019081526040519081900360200190208151819062000d00908262000ef8565b50602082015160018201556040820151600282019062000d21908262000ef8565b5090505060007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c6001600160a01b0316639d2ad72a6040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000d89573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000db39190810190620010bc565b905060005b815181101562000e4a5781818151811062000dd75762000dd7620011ee565b602002602001015160200151600983838151811062000dfa5762000dfa620011ee565b60200260200101516000015160405162000e15919062001204565b9081526020016040518091039020600201908162000e34919062000ef8565b508062000e418162001222565b91505062000db8565b50600091505090565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168062000e7e57607f821691505b60208210810362000e9f57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111562000ef357600081815260208120601f850160051c8101602086101562000ece5750805b601f850160051c820191505b8181101562000eef5782815560010162000eda565b5050505b505050565b81516001600160401b0381111562000f145762000f1462000e53565b62000f2c8162000f25845462000e69565b8462000ea5565b602080601f83116001811462000f64576000841562000f4b5750858301515b600019600386901b1c1916600185901b17855562000eef565b600085815260208120601f198616915b8281101562000f955788860151825594840194600190910190840162000f74565b508582101562000fb45787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b604080519081016001600160401b038111828210171562000fe95762000fe962000e53565b60405290565b604051601f8201601f191681016001600160401b03811182821017156200101a576200101a62000e53565b604052919050565b60005b838110156200103f57818101518382015260200162001025565b50506000910152565b600082601f8301126200105a57600080fd5b81516001600160401b0381111562001076576200107662000e53565b6200108b601f8201601f191660200162000fef565b818152846020838601011115620010a157600080fd5b620010b482602083016020870162001022565b949350505050565b60006020808385031215620010d057600080fd5b82516001600160401b0380821115620010e857600080fd5b818501915085601f830112620010fd57600080fd5b81518181111562001112576200111262000e53565b8060051b6200112385820162000fef565b91825283810185019185810190898411156200113e57600080fd5b86860192505b83831015620011e1578251858111156200115e5760008081fd5b86016040818c03601f1901811315620011775760008081fd5b6200118162000fc4565b8983015188811115620011945760008081fd5b620011a48e8c8387010162001048565b825250908201519087821115620011bb5760008081fd5b620011cb8d8b8486010162001048565b818b015284525050918601919086019062001144565b9998505050505050505050565b634e487b7160e01b600052603260045260246000fd5b600082516200121881846020870162001022565b9190910192915050565b6000600182016200124357634e487b7160e01b600052601160045260246000fd5b5060010190565b6124c6806200125a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630a9254e4146100515780635eef12321461005b578063ba414fa614610063578063fa7626d41461007f575b600080fd5b61005961008c565b005b6100596100d7565b61006b610446565b604051901515815260200160405180910390f35b60075461006b9060ff1681565b60405161009890610821565b604051809103906000f0801580156100b4573d6000803e3d6000fd5b50601180546001600160a01b0319166001600160a01b0392909216919091179055565b6100df61082e565b80517f1e1a6fd6fa4907c1f9a14c0e4f7f7b084cb665be6b4f1bdd846a8213228291ca905280517f058e3962e5fca5ceed3271a1f4c44e7304abc60d2e7162a662b8e7f3f5083fbe6020918201526040805180820182527f209d00968e77938ddaaa56eeb738261652544aa688d8502846090413f1e3152d81527f128319844ec9652e69f529672b71005ef527c262e4f18834b07e260a24e5862381840152828401805191909152815180830183527f2123d822a1d4ac866c4fb397010e1d9228f143c9836e11c56f92003b7167614881527f212d6191dcfb56e897f8e6c94b008a5a363b12efca0150bc3e7deabcf328852381850152905183015280830180517f206cddb28a1fd1359f266bc731951fcd2acba276cf11aa9221d3cd3dfe60d9959052517f11eb4225015668817fd7a724d6f4cdf593cf9eaebb5137e4f3cf402443735c989083015280516101008101825260008082527f25b50f972e6f311960bfbc78176157aacee4ed5a45938c2e1b4c0585b44053868285018190527f2df8c0ab66dc3db17505f16c0b53554ee08f3b301a6299fad988b8a8a487e08a83850152600160608401526080830182905260a083015260c0820181905260e0820152601154825163ebf0c71760e01b815292519193610317936001600160a01b039092169263ebf0c7179260048082019392918290030181865afa1580156102ec573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031091906108b9565b6000610573565b60115460408051606081018252602081018581526001600160a01b0390931692637985746292829190820161034b8761069a565b905290526040516001600160e01b031960e084901b16815261037091906004016108fb565b600060405180830381600087803b15801561038a57600080fd5b505af115801561039e573d6000803e3d6000fd5b50505050610442601160009054906101000a90046001600160a01b03166001600160a01b031663ebf0c7176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041c91906108b9565b7f25b50f972e6f311960bfbc78176157aacee4ed5a45938c2e1b4c0585b4405386610573565b5050565b600754600090610100900460ff16156104685750600754610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561056e5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916104f6917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610a0b565b60408051601f198184030181529082905261051091610a2f565b6000604051808303816000865af19150503d806000811461054d576040519150601f19603f3d011682016040523d82523d6000602084013e610552565b606091505b509150508080602001905181019061056a9190610a42565b9150505b919050565b808214610442577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516105e49060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610442610715565b6040805160088082526101208201909252606091602082016101008036833701905050905060005b600881101561070f578281600881106106dd576106dd610a64565b60200201518282815181106106f4576106f4610a64565b602090810291909101015261070881610a7a565b90506106c2565b50919050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156108105760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526107af9291602001610a0b565b60408051601f19818403018152908290526107c991610a2f565b6000604051808303816000865af19150503d8060008114610806576040519150601f19603f3d011682016040523d82523d6000602084013e61080b565b606091505b505050505b6007805461ff001916610100179055565b6119ef80610aa283390190565b6040805160a08101909152600060608201818152608083019190915281526020810161085861087f565b815260200161087a604051806040016040528060008152602001600081525090565b905290565b604051806040016040528061089261089b565b815260200161087a5b60405180604001604052806002906020820280368337509192915050565b6000602082840312156108cb57600080fd5b5051919050565b8060005b60028110156108f55781518452602093840193909101906001016108d6565b50505050565b602080825260009060408382018185018685805b600180821061091e57506109cd565b601f198a86030186528351610120808701825161094689825180518252602090810151910152565b8b8101516109578c8b0182516108d2565b8c015161096760808b01826108d2565b508a0151805160c08a01526020015160e0890152918a015161010088019190915280519182905289019061014087019085905b808210156109b75783518352928b0192918b01919084019061099a565b505096890196955050509186019160010161090f565b509198975050505050505050565b6000815160005b818110156109fc57602081850181015186830152016109e2565b50600093019283525090919050565b6001600160e01b0319831681526000610a2760048301846109db565b949350505050565b6000610a3b82846109db565b9392505050565b600060208284031215610a5457600080fd5b81518015158114610a3b57600080fd5b634e487b7160e01b600052603260045260246000fd5b600060018201610a9a57634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b506119cf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063798574621461003b578063ebf0c71714610050575b600080fd5b61004e6100493660046117ae565b61006b565b005b61005960005481565b60405190815260200160405180910390f35b8051602001518051600090610082576100826118f5565b60200260200101516000541461009757600080fd5b60005b60018110156100d2576100c28282600181106100b8576100b86118f5565b602002015161011b565b6100cb81611921565b905061009a565b50806100df60018061193a565b600181106100ef576100ef6118f5565b60200201516020015160018151811061010a5761010a6118f5565b602002602001015160008190555050565b80602001515160141461012d57600080fd5b61013f8160200151826000015161014c565b1561014957600080fd5b50565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816101786102d1565b90508060800151518551600161018e919061194d565b1461019857600080fd5b604080518082019091526000808252602082018190525b865181101561024657838782815181106101cb576101cb6118f5565b6020026020010151106101dd57600080fd5b6102328261022d85608001518460016101f6919061194d565b81518110610206576102066118f5565b60200260200101518a8581518110610220576102206118f5565b6020026020010151610f41565b610f9f565b91508061023e81611921565b9150506101af565b5061026f818360800151600081518110610262576102626118f5565b6020026020010151610f9f565b90506102b38560000151866020015161028784610ff5565b85604001516102998a60400151610ff5565b606088015188516102a990610ff5565b8960200151611094565b6102c357600193505050506102cb565b600093505050505b92915050565b6102d9611500565b6040805180820182527f1627c4bb4f235ffc1cbad4d290d670d70ac1e9f6584d17473bd73f623d0308eb81527f130d14032b87d4f33cde88477bcc6c03109f576fd0a7873c8652b1a6c022335c6020808301919091529083528151608080820184527f190c9e0fde56bde325c7fb3739ebce3d50694e266a759f9ff985fd036743aeb38285019081527f2e597c5d711300b52e541a5c36c9f9670e0665f54de871a3849e7a59088498fa606080850191909152908352845180860186527f22a24109cf185a633c992e5d246bdb4a2f4e519b78a99317e96a3b64ff08a4a581527f0b5887b82b23c8fa38e6b10589ae85d089cfecf48a9767df7bdb7535a6228d48818601528385015285840192909252835180820185527f03746b25c614783085e58f02765f730f986bfd9c539a7d54c84da8385123b1208186019081527f0689617067c64d517a83d254bb798ab6c4ef198e2d88a33cd8df2c96e4200e0f828501528152845180860186527f21c0534f145edd4bc1e130245f6bf41963b8cd14b417d0c4db7ba8f9735d42d381527f10bd3e116d0b35ed5def903ae949a1393eb5e184c408a55081aa7e3b333b926b818601528185015285850152835190810184527f27f0ab0caef178696fd6fb09d90e8a00173bfe02c1e3f76d8aef1370e619831e8185019081527f2a074c6bdc0dfc9e367dc30aa9cb31eb3dc0153a1cba22346e5ec5fc878b0a68828401528152835180850185527f0ba5bd81ce69e7b2718d1bbb584040f3d366c62e6a5f289323d771ba0c6d392281527f20728511d3608a8d3b5fd9bce8096fa2f0fe2b88ee0ab83399450cb17aebc238818501528184015290840152815160158082526102c08201909352919082015b604080518082019091526000808252602082015281526020019060019003908161055557505060808201908152604080518082019091527f06d1f3f066edaa3685eaa713dc84f6f8e290972ddfbdf195324314a319779a5f81527f1a8a67d666ec17570fc29c464c2762b9d67a5a305287bbd5d516a0b45ae4f4126020820152905180516000906105e8576105e86118f5565b602002602001018190525060405180604001604052807f2ee817f58bbaa79be14ded824fe3767b33c4c1ad39dc499a0b7f987b7acee45081526020017f185c93e7c0409e821fbf06f24d9480e834514541378baf2280e38a8d4c8614d5815250816080015160018151811061065f5761065f6118f5565b602002602001018190525060405180604001604052807f02f38b7cd454a76186f6c661ba0d0a6b7dca24c3ee4632f82a8fcc5f622c5c3a81526020017f2f9164b5bcbd103e9556c7d7d6cf02068f1b9f1a94b625e8b19e0935b9ca124581525081608001516002815181106106d6576106d66118f5565b602002602001018190525060405180604001604052807f1ddff3df123b53f055200353a385509500f621c42658743557704fcd1e6ca74d81526020017f1005b6fb681eda6ccc9216493972ce4ac447ab3fa59fc48dca509b39b8f4f927815250816080015160038151811061074d5761074d6118f5565b602002602001018190525060405180604001604052807f2abe8c68fd779d8b81e5207a7ae5e7abb3d337af69403250b658a68845bdef7481526020017f079de83604e57310eb6679287e5099d24803baece3516df10cb87bdef134ba6981525081608001516004815181106107c4576107c46118f5565b602002602001018190525060405180604001604052807f2e5ce6bd54bd13c792f2ec1334605ed1becbfc5ca906ae7e916b7ad924f915f681526020017f061e327cb02f17fc4e4a9338377d0798620515e9a442e02a1447f275318c99f7815250816080015160058151811061083b5761083b6118f5565b602002602001018190525060405180604001604052807f02ff278c04ec67356f19555a59662034fb31a498a95a932d4cac448ce1c7c44781526020017f0d598846dd628da8383f85378ea45acaeb430d0dd4d0fec540baa1417700f68d81525081608001516006815181106108b2576108b26118f5565b602002602001018190525060405180604001604052807f2dd6e61b04f40cc370daec918088e2dd3c89d2cb06af04e11b686824bd3e346181526020017f1fc7511743f0e8f81fbce5026c7f915465c8b5a81e0b06f2976932d335e149918152508160800151600781518110610929576109296118f5565b602002602001018190525060405180604001604052807f1296d259dea3fd00b6511945b63bf6d365e3e66975356243fc1ab9dbb3d1f2e081526020017f177089885c2e85515848cccc3da69337c1a06dbe9cc0c6431893021fbc3bf91f81525081608001516008815181106109a0576109a06118f5565b602002602001018190525060405180604001604052807f03395a2aab3f0571f87445647ad793d1624d0946827be76be7502883fe596f3981526020017f0d83145bdd06c4b9f64fbe370e53e2b08b7a2896345ace4086ccd01dcbd41f1d8152508160800151600981518110610a1757610a176118f5565b602002602001018190525060405180604001604052807f227c46372b26d66eb0a78bb0d539258cf00a277e6e76d15ec377fc2fb6560e0e81526020017f2052cd1ca090caa901f1336b71b7ef22d8a622cf452aeb9b3353f771d154ac9f8152508160800151600a81518110610a8e57610a8e6118f5565b602002602001018190525060405180604001604052807f2b01be3a8862cea4aea8ab991b26c9c1420118c6cd5be50cb8b8686317db69a881526020017f2358f0748bddec3b2d1a863aa69b5b3b11f9863d27a3682c040d726962a782a68152508160800151600b81518110610b0557610b056118f5565b602002602001018190525060405180604001604052807f16cd4992338faf22192769a49b802e302d55361a705eb1c084743fc8bb119b6381526020017f0a7e7448e21423eaaa162f77abdb0e2e65ee6a9b2dc650ac523cf3a68b904a768152508160800151600c81518110610b7c57610b7c6118f5565b602002602001018190525060405180604001604052807f0b5dd807aca4a471d710ce43e1dfeb39aa741b65fa27da221932e3faa4ebda1981526020017f19369275e51ac64eb4d877d98ce9452db81202c98a49799efc15673f3fb4e3318152508160800151600d81518110610bf357610bf36118f5565b602002602001018190525060405180604001604052807f0fbe80976a0913a367b8e26f7e7056b31a7d0c6c1571ff0c014a2c0e4ecd3db481526020017f0fc790e3b5e0ef960ca88cbd6d713fbd3c53a433006bda549cdf33c75b6e536c8152508160800151600e81518110610c6a57610c6a6118f5565b602002602001018190525060405180604001604052807f0a994015098da0d1cafba01cfe852ad7243ace402ed5f0e5d3c03cc4f915621681526020017f0fcf1dc106bdf98e9f55b7787ceb3ae6a62e34c144b83a40e78e4b570a9d78248152508160800151600f81518110610ce157610ce16118f5565b602002602001018190525060405180604001604052807f2de67bc8186c7857cc673e4582833eb1e9816320203c4529429bf507fa6b275281526020017f18dce1a24839ba705675f95fc2c906503358cc5c7e189c4a218b3456638d1c988152508160800151601081518110610d5857610d586118f5565b602002602001018190525060405180604001604052807f045cbe12bafa50d56858808435cfbb15e726849f78cd1ea2c9312918177d406781526020017f161f7c300b75bdc14470f19fd41bd7edc3dcf4ce332c811d3dc6579aac5bab718152508160800151601181518110610dcf57610dcf6118f5565b602002602001018190525060405180604001604052807f15c9a0c69520fe52e4d5bd7e69fac4b79602d20abc125a5c684b7711016efc3881526020017f2894c1d670f911cd3809b859b93786d97b58f4742b90e8d5a3aea5eb57129eef8152508160800151601281518110610e4657610e466118f5565b602002602001018190525060405180604001604052807e82c698389cd75c105e734392dc2a414481883e6ecb19180156bd34043192a181526020017f14dbc3fa9b6b67fbcebd3b19d586aa85f2bcc9a85eec61cee5149af47e7f99ac8152508160800151601381518110610ebc57610ebc6118f5565b602002602001018190525060405180604001604052807f2209a57304df0d0084b6a785ae4c0eb99f3aac46baf6181439762edb2e5fb08b81526020017f0f3829b8d02d20e87e28c37eea5c5d19e4d43c44156fef157e060eb9f5e184438152508160800151601481518110610f3357610f336118f5565b602002602001018190525090565b6040805180820190915260008082526020820152610f5d611551565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa90508080610f8c57fe5b5080610f9757600080fd5b505092915050565b6040805180820190915260008082526020820152610fbb61156f565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa90508080610f8c57fe5b604080518082019091526000808252602082015281517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479015801561103c57506020830151155b1561105c5750506040805180820190915260008082526020820152919050565b6040518060400160405280846000015181526020018285602001516110819190611960565b61108b908461193a565b90529392505050565b60408051600480825260a08201909252600091829190816020015b60408051808201909152600080825260208201528152602001906001900390816110af57505060408051600480825260a0820190925291925060009190602082015b6110f961158d565b8152602001906001900390816110f15790505090508a82600081518110611122576111226118f5565b60200260200101819052508882600181518110611141576111416118f5565b60200260200101819052508682600281518110611160576111606118f5565b6020026020010181905250848260038151811061117f5761117f6118f5565b6020026020010181905250898160008151811061119e5761119e6118f5565b602002602001018190525087816001815181106111bd576111bd6118f5565b602002602001018190525085816002815181106111dc576111dc6118f5565b602002602001018190525083816003815181106111fb576111fb6118f5565b6020026020010181905250611210828261121f565b9b9a5050505050505050505050565b6000815183511461122f57600080fd5b8251600061123e826006611982565b905060008167ffffffffffffffff81111561125b5761125b6115ee565b604051908082528060200260200182016040528015611284578160200160208202803683370190505b50905060005b838110156114bf578681815181106112a4576112a46118f5565b602002602001015160000151828260066112be9190611982565b6112c990600061194d565b815181106112d9576112d96118f5565b6020026020010181815250508681815181106112f7576112f76118f5565b602002602001015160200151828260066113119190611982565b61131c90600161194d565b8151811061132c5761132c6118f5565b60200260200101818152505085818151811061134a5761134a6118f5565b60209081029190910181015151015182611365836006611982565b61137090600261194d565b81518110611380576113806118f5565b60200260200101818152505085818151811061139e5761139e6118f5565b60209081029190910101515151826113b7836006611982565b6113c290600361194d565b815181106113d2576113d26118f5565b6020026020010181815250508581815181106113f0576113f06118f5565b60200260200101516020015160016002811061140e5761140e6118f5565b60200201518261141f836006611982565b61142a90600461194d565b8151811061143a5761143a6118f5565b602002602001018181525050858181518110611458576114586118f5565b602002602001015160200151600060028110611476576114766118f5565b602002015182611487836006611982565b61149290600561194d565b815181106114a2576114a26118f5565b6020908102919091010152806114b781611921565b91505061128a565b506114c86115b2565b6000602082602086026020860160086107d05a03fa905080806114e757fe5b50806114f257600080fd5b505115159695505050505050565b6040805160e08101909152600060a0820181815260c083019190915281526020810161152a61158d565b815260200161153761158d565b815260200161154461158d565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806115a06115d0565b81526020016115ad6115d0565b905290565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611627576116276115ee565b60405290565b6040516060810167ffffffffffffffff81118282101715611627576116276115ee565b6040516020810167ffffffffffffffff81118282101715611627576116276115ee565b60006040828403121561168557600080fd5b61168d611604565b9050813581526020820135602082015292915050565b600082601f8301126116b457600080fd5b6040516040810181811067ffffffffffffffff821117156116d7576116d76115ee565b80604052508060408401858111156116ee57600080fd5b845b818110156117085780358352602092830192016116f0565b509195945050505050565b600082601f83011261172457600080fd5b8135602067ffffffffffffffff80831115611741576117416115ee565b8260051b604051601f19603f83011681018181108482111715611766576117666115ee565b60405293845285810183019383810192508785111561178457600080fd5b83870191505b848210156117a35781358352918301919083019061178a565b979650505050505050565b600060208083850312156117c157600080fd5b823567ffffffffffffffff808211156117d957600080fd5b818501915085601f8301126117ed57600080fd5b6117f5611650565b808484018881111561180657600080fd5b845b818110156118e75780358581111561181f57600080fd5b8601808b0361012081121561183357600080fd5b61183b611604565b6101008083121561184b57600080fd5b61185361162d565b61185d8f86611673565b81526080603f19850112156118725760008081fd5b61187a611604565b93506118898f604087016116a3565b84526118988f608087016116a3565b8c850152838c8201526118ae8f60c08701611673565b604082015282528301359150878211156118c85760008081fd5b6118d48d838501611713565b818b015286525050928601928601611808565b509098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016119335761193361190b565b5060010190565b818103818111156102cb576102cb61190b565b808201808211156102cb576102cb61190b565b60008261197d57634e487b7160e01b600052601260045260246000fd5b500690565b80820281158282048414176102cb576102cb61190b56fea2646970667358221220337ef6d87020d404b0a29a497446a6e4aec8fb208ca0500fd9ff43acf910c3c764736f6c63430008110033a2646970667358221220300b1008c6dddcd48ef4db9fb0bcef584657a25d5e851d9ca64997af5ad4aca564736f6c6343000811003368747470733a2f2f646174612d736565642d7072656273632d312d73312e62696e616e63652e6f72673a3835343568747470733a2f2f6170692e617661782e6e6574776f726b2f6578742f62632f432f72706368747470733a2f2f6d61696e6e65742e696e667572612e696f2f76332f363737303435346263366561343263353861616331323937383533316239336668747470733a2f2f676f65726c692e696e667572612e696f2f76332f363737303435346263366561343263353861616331323937383533316239336668747470733a2f2f676f65726c692d726f6c6c75702e617262697472756d2e696f2f72706368747470733a2f2f6170692e617661782d746573742e6e6574776f726b2f6578742f62632f432f72706368747470733a2f2f6273632d6461746173656564312e62696e616e63652e6f7267" . parse () . expect ("invalid bytecode")
        });
    pub struct TrollupTest<M>(ethers::contract::Contract<M>);
    impl<M> Clone for TrollupTest<M> {
        fn clone(&self) -> Self {
            TrollupTest(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for TrollupTest<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for TrollupTest<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(TrollupTest))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> TrollupTest<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), TROLLUPTEST_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                TROLLUPTEST_ABI.clone(),
                TROLLUPTEST_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `IS_TEST` (0xfa7626d4) function"]
        pub fn is_test(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([250, 118, 38, 212], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `failed` (0xba414fa6) function"]
        pub fn failed(&self) -> ethers::contract::builders::ContractCall<M, bool> {
            self.0
                .method_hash([186, 65, 79, 166], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `setUp` (0x0a9254e4) function"]
        pub fn set_up(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([10, 146, 84, 228], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `testProof1` (0x5eef1232) function"]
        pub fn test_proof_1(&self) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([94, 239, 18, 50], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Gets the contract's `log` event"]
        pub fn log_filter(&self) -> ethers::contract::builders::Event<M, LogFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_address` event"]
        pub fn log_address_filter(&self) -> ethers::contract::builders::Event<M, LogAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_1_filter(&self) -> ethers::contract::builders::Event<M, LogArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_2_filter(&self) -> ethers::contract::builders::Event<M, LogArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_array` event"]
        pub fn log_array_3_filter(&self) -> ethers::contract::builders::Event<M, LogArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes` event"]
        pub fn log_bytes_filter(&self) -> ethers::contract::builders::Event<M, LogBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_bytes32` event"]
        pub fn log_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_int` event"]
        pub fn log_int_filter(&self) -> ethers::contract::builders::Event<M, LogIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_address` event"]
        pub fn log_named_address_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedAddressFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_1_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray1Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_2_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray2Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_array` event"]
        pub fn log_named_array_3_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedArray3Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes` event"]
        pub fn log_named_bytes_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytesFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_bytes32` event"]
        pub fn log_named_bytes_32_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedBytes32Filter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_int` event"]
        pub fn log_named_decimal_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_decimal_uint` event"]
        pub fn log_named_decimal_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedDecimalUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_int` event"]
        pub fn log_named_int_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedIntFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_string` event"]
        pub fn log_named_string_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_named_uint` event"]
        pub fn log_named_uint_filter(
            &self,
        ) -> ethers::contract::builders::Event<M, LogNamedUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_string` event"]
        pub fn log_string_filter(&self) -> ethers::contract::builders::Event<M, LogStringFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `log_uint` event"]
        pub fn log_uint_filter(&self) -> ethers::contract::builders::Event<M, LogUintFilter> {
            self.0.event()
        }
        #[doc = "Gets the contract's `logs` event"]
        pub fn logs_filter(&self) -> ethers::contract::builders::Event<M, LogsFilter> {
            self.0.event()
        }
        #[doc = r" Returns an [`Event`](#ethers_contract::builders::Event) builder for all events of this contract"]
        pub fn events(&self) -> ethers::contract::builders::Event<M, TrollupTestEvents> {
            self.0.event_with_filter(Default::default())
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for TrollupTest<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log", abi = "log(string)")]
    pub struct LogFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_address", abi = "log_address(address)")]
    pub struct LogAddressFilter(pub ethers::core::types::Address);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_array", abi = "log_array(uint256[])")]
    pub struct LogArray1Filter {
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_array", abi = "log_array(int256[])")]
    pub struct LogArray2Filter {
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_array", abi = "log_array(address[])")]
    pub struct LogArray3Filter {
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_bytes", abi = "log_bytes(bytes)")]
    pub struct LogBytesFilter(pub ethers::core::types::Bytes);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_bytes32", abi = "log_bytes32(bytes32)")]
    pub struct LogBytes32Filter(pub [u8; 32]);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_int", abi = "log_int(int256)")]
    pub struct LogIntFilter(pub I256);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_address", abi = "log_named_address(string,address)")]
    pub struct LogNamedAddressFilter {
        pub key: String,
        pub val: ethers::core::types::Address,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,uint256[])")]
    pub struct LogNamedArray1Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::U256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,int256[])")]
    pub struct LogNamedArray2Filter {
        pub key: String,
        pub val: Vec<I256>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_array", abi = "log_named_array(string,address[])")]
    pub struct LogNamedArray3Filter {
        pub key: String,
        pub val: Vec<ethers::core::types::Address>,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_bytes", abi = "log_named_bytes(string,bytes)")]
    pub struct LogNamedBytesFilter {
        pub key: String,
        pub val: ethers::core::types::Bytes,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_bytes32", abi = "log_named_bytes32(string,bytes32)")]
    pub struct LogNamedBytes32Filter {
        pub key: String,
        pub val: [u8; 32],
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "log_named_decimal_int",
        abi = "log_named_decimal_int(string,int256,uint256)"
    )]
    pub struct LogNamedDecimalIntFilter {
        pub key: String,
        pub val: I256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(
        name = "log_named_decimal_uint",
        abi = "log_named_decimal_uint(string,uint256,uint256)"
    )]
    pub struct LogNamedDecimalUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
        pub decimals: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_int", abi = "log_named_int(string,int256)")]
    pub struct LogNamedIntFilter {
        pub key: String,
        pub val: I256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_string", abi = "log_named_string(string,string)")]
    pub struct LogNamedStringFilter {
        pub key: String,
        pub val: String,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_named_uint", abi = "log_named_uint(string,uint256)")]
    pub struct LogNamedUintFilter {
        pub key: String,
        pub val: ethers::core::types::U256,
    }
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_string", abi = "log_string(string)")]
    pub struct LogStringFilter(pub String);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "log_uint", abi = "log_uint(uint256)")]
    pub struct LogUintFilter(pub ethers::core::types::U256);
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthEvent,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethevent(name = "logs", abi = "logs(bytes)")]
    pub struct LogsFilter(pub ethers::core::types::Bytes);
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum TrollupTestEvents {
        LogFilter(LogFilter),
        LogAddressFilter(LogAddressFilter),
        LogArray1Filter(LogArray1Filter),
        LogArray2Filter(LogArray2Filter),
        LogArray3Filter(LogArray3Filter),
        LogBytesFilter(LogBytesFilter),
        LogBytes32Filter(LogBytes32Filter),
        LogIntFilter(LogIntFilter),
        LogNamedAddressFilter(LogNamedAddressFilter),
        LogNamedArray1Filter(LogNamedArray1Filter),
        LogNamedArray2Filter(LogNamedArray2Filter),
        LogNamedArray3Filter(LogNamedArray3Filter),
        LogNamedBytesFilter(LogNamedBytesFilter),
        LogNamedBytes32Filter(LogNamedBytes32Filter),
        LogNamedDecimalIntFilter(LogNamedDecimalIntFilter),
        LogNamedDecimalUintFilter(LogNamedDecimalUintFilter),
        LogNamedIntFilter(LogNamedIntFilter),
        LogNamedStringFilter(LogNamedStringFilter),
        LogNamedUintFilter(LogNamedUintFilter),
        LogStringFilter(LogStringFilter),
        LogUintFilter(LogUintFilter),
        LogsFilter(LogsFilter),
    }
    impl ethers::contract::EthLogDecode for TrollupTestEvents {
        fn decode_log(
            log: &ethers::core::abi::RawLog,
        ) -> ::std::result::Result<Self, ethers::core::abi::Error>
        where
            Self: Sized,
        {
            if let Ok(decoded) = LogFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogFilter(decoded));
            }
            if let Ok(decoded) = LogAddressFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogAddressFilter(decoded));
            }
            if let Ok(decoded) = LogArray1Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogArray1Filter(decoded));
            }
            if let Ok(decoded) = LogArray2Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogArray2Filter(decoded));
            }
            if let Ok(decoded) = LogArray3Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogArray3Filter(decoded));
            }
            if let Ok(decoded) = LogBytesFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogBytesFilter(decoded));
            }
            if let Ok(decoded) = LogBytes32Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogIntFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedAddressFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedAddressFilter(decoded));
            }
            if let Ok(decoded) = LogNamedArray1Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedArray1Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray2Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedArray2Filter(decoded));
            }
            if let Ok(decoded) = LogNamedArray3Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedArray3Filter(decoded));
            }
            if let Ok(decoded) = LogNamedBytesFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedBytesFilter(decoded));
            }
            if let Ok(decoded) = LogNamedBytes32Filter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedBytes32Filter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalIntFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedDecimalIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedDecimalUintFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedDecimalUintFilter(decoded));
            }
            if let Ok(decoded) = LogNamedIntFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedIntFilter(decoded));
            }
            if let Ok(decoded) = LogNamedStringFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedStringFilter(decoded));
            }
            if let Ok(decoded) = LogNamedUintFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogNamedUintFilter(decoded));
            }
            if let Ok(decoded) = LogStringFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogStringFilter(decoded));
            }
            if let Ok(decoded) = LogUintFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogUintFilter(decoded));
            }
            if let Ok(decoded) = LogsFilter::decode_log(log) {
                return Ok(TrollupTestEvents::LogsFilter(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData)
        }
    }
    impl ::std::fmt::Display for TrollupTestEvents {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                TrollupTestEvents::LogFilter(element) => element.fmt(f),
                TrollupTestEvents::LogAddressFilter(element) => element.fmt(f),
                TrollupTestEvents::LogArray1Filter(element) => element.fmt(f),
                TrollupTestEvents::LogArray2Filter(element) => element.fmt(f),
                TrollupTestEvents::LogArray3Filter(element) => element.fmt(f),
                TrollupTestEvents::LogBytesFilter(element) => element.fmt(f),
                TrollupTestEvents::LogBytes32Filter(element) => element.fmt(f),
                TrollupTestEvents::LogIntFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedAddressFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedArray1Filter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedArray2Filter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedArray3Filter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedBytesFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedBytes32Filter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedDecimalIntFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedDecimalUintFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedIntFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedStringFilter(element) => element.fmt(f),
                TrollupTestEvents::LogNamedUintFilter(element) => element.fmt(f),
                TrollupTestEvents::LogStringFilter(element) => element.fmt(f),
                TrollupTestEvents::LogUintFilter(element) => element.fmt(f),
                TrollupTestEvents::LogsFilter(element) => element.fmt(f),
            }
        }
    }
    #[doc = "Container type for all input parameters for the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "IS_TEST", abi = "IS_TEST()")]
    pub struct IsTestCall;
    #[doc = "Container type for all input parameters for the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "failed", abi = "failed()")]
    pub struct FailedCall;
    #[doc = "Container type for all input parameters for the `setUp` function with signature `setUp()` and selector `[10, 146, 84, 228]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "setUp", abi = "setUp()")]
    pub struct SetUpCall;
    #[doc = "Container type for all input parameters for the `testProof1` function with signature `testProof1()` and selector `[94, 239, 18, 50]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "testProof1", abi = "testProof1()")]
    pub struct TestProof1Call;
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum TrollupTestCalls {
        IsTest(IsTestCall),
        Failed(FailedCall),
        SetUp(SetUpCall),
        TestProof1(TestProof1Call),
    }
    impl ethers::core::abi::AbiDecode for TrollupTestCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <IsTestCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TrollupTestCalls::IsTest(decoded));
            }
            if let Ok(decoded) = <FailedCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TrollupTestCalls::Failed(decoded));
            }
            if let Ok(decoded) = <SetUpCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TrollupTestCalls::SetUp(decoded));
            }
            if let Ok(decoded) =
                <TestProof1Call as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TrollupTestCalls::TestProof1(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for TrollupTestCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                TrollupTestCalls::IsTest(element) => element.encode(),
                TrollupTestCalls::Failed(element) => element.encode(),
                TrollupTestCalls::SetUp(element) => element.encode(),
                TrollupTestCalls::TestProof1(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for TrollupTestCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                TrollupTestCalls::IsTest(element) => element.fmt(f),
                TrollupTestCalls::Failed(element) => element.fmt(f),
                TrollupTestCalls::SetUp(element) => element.fmt(f),
                TrollupTestCalls::TestProof1(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<IsTestCall> for TrollupTestCalls {
        fn from(var: IsTestCall) -> Self {
            TrollupTestCalls::IsTest(var)
        }
    }
    impl ::std::convert::From<FailedCall> for TrollupTestCalls {
        fn from(var: FailedCall) -> Self {
            TrollupTestCalls::Failed(var)
        }
    }
    impl ::std::convert::From<SetUpCall> for TrollupTestCalls {
        fn from(var: SetUpCall) -> Self {
            TrollupTestCalls::SetUp(var)
        }
    }
    impl ::std::convert::From<TestProof1Call> for TrollupTestCalls {
        fn from(var: TestProof1Call) -> Self {
            TrollupTestCalls::TestProof1(var)
        }
    }
    #[doc = "Container type for all return fields from the `IS_TEST` function with signature `IS_TEST()` and selector `[250, 118, 38, 212]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct IsTestReturn(pub bool);
    #[doc = "Container type for all return fields from the `failed` function with signature `failed()` and selector `[186, 65, 79, 166]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct FailedReturn(pub bool);
}
