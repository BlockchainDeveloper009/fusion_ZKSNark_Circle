pub use trollup::*;
#[allow(clippy::too_many_arguments, non_camel_case_types)]
pub mod trollup {
    #![allow(clippy::enum_variant_names)]
    #![allow(dead_code)]
    #![allow(clippy::type_complexity)]
    #![allow(unused_imports)]
    use ethers::contract::{
        builders::{ContractCall, Event},
        Contract, Lazy,
    };
    use ethers::core::{
        abi::{Abi, Detokenize, InvalidOutputType, Token, Tokenizable},
        types::*,
    };
    use ethers::providers::Middleware;
    #[doc = "Trollup was auto-generated with ethers-rs Abigen. More information at: https://github.com/gakonst/ethers-rs"]
    use std::sync::Arc;
    # [rustfmt :: skip] const __ABI : & str = "[{\"inputs\":[],\"stateMutability\":\"view\",\"type\":\"function\",\"name\":\"root\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\",\"components\":[]}]},{\"inputs\":[{\"internalType\":\"struct Trollup.TxProof[1]\",\"name\":\"l2Block\",\"type\":\"tuple[1]\",\"components\":[{\"internalType\":\"struct Verifier.Proof\",\"name\":\"proof\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"struct Pairing.G1Point\",\"name\":\"a\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\",\"components\":[]}]},{\"internalType\":\"struct Pairing.G2Point\",\"name\":\"b\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\",\"components\":[]},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\",\"components\":[]}]},{\"internalType\":\"struct Pairing.G1Point\",\"name\":\"c\",\"type\":\"tuple\",\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\",\"components\":[]},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\",\"components\":[]}]}]},{\"internalType\":\"uint256[]\",\"name\":\"input\",\"type\":\"uint256[]\",\"components\":[]}]}],\"stateMutability\":\"nonpayable\",\"type\":\"function\",\"name\":\"submitBlock\",\"outputs\":[]}]" ;
    #[doc = r" The parsed JSON-ABI of the contract."]
    pub static TROLLUP_ABI: ethers::contract::Lazy<ethers::core::abi::Abi> =
        ethers::contract::Lazy::new(|| {
            ethers::core::utils::__serde_json::from_str(__ABI).expect("invalid abi")
        });
    #[doc = r" Bytecode of the #name contract"]
    pub static TROLLUP_BYTECODE: ethers::contract::Lazy<ethers::core::types::Bytes> =
        ethers::contract::Lazy::new(|| {
            "0x608060405234801561001057600080fd5b506119cf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063798574621461003b578063ebf0c71714610050575b600080fd5b61004e6100493660046117ae565b61006b565b005b61005960005481565b60405190815260200160405180910390f35b8051602001518051600090610082576100826118f5565b60200260200101516000541461009757600080fd5b60005b60018110156100d2576100c28282600181106100b8576100b86118f5565b602002015161011b565b6100cb81611921565b905061009a565b50806100df60018061193a565b600181106100ef576100ef6118f5565b60200201516020015160018151811061010a5761010a6118f5565b602002602001015160008190555050565b80602001515160141461012d57600080fd5b61013f8160200151826000015161014c565b1561014957600080fd5b50565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816101786102d1565b90508060800151518551600161018e919061194d565b1461019857600080fd5b604080518082019091526000808252602082018190525b865181101561024657838782815181106101cb576101cb6118f5565b6020026020010151106101dd57600080fd5b6102328261022d85608001518460016101f6919061194d565b81518110610206576102066118f5565b60200260200101518a8581518110610220576102206118f5565b6020026020010151610f41565b610f9f565b91508061023e81611921565b9150506101af565b5061026f818360800151600081518110610262576102626118f5565b6020026020010151610f9f565b90506102b38560000151866020015161028784610ff5565b85604001516102998a60400151610ff5565b606088015188516102a990610ff5565b8960200151611094565b6102c357600193505050506102cb565b600093505050505b92915050565b6102d9611500565b6040805180820182527f1627c4bb4f235ffc1cbad4d290d670d70ac1e9f6584d17473bd73f623d0308eb81527f130d14032b87d4f33cde88477bcc6c03109f576fd0a7873c8652b1a6c022335c6020808301919091529083528151608080820184527f190c9e0fde56bde325c7fb3739ebce3d50694e266a759f9ff985fd036743aeb38285019081527f2e597c5d711300b52e541a5c36c9f9670e0665f54de871a3849e7a59088498fa606080850191909152908352845180860186527f22a24109cf185a633c992e5d246bdb4a2f4e519b78a99317e96a3b64ff08a4a581527f0b5887b82b23c8fa38e6b10589ae85d089cfecf48a9767df7bdb7535a6228d48818601528385015285840192909252835180820185527f03746b25c614783085e58f02765f730f986bfd9c539a7d54c84da8385123b1208186019081527f0689617067c64d517a83d254bb798ab6c4ef198e2d88a33cd8df2c96e4200e0f828501528152845180860186527f21c0534f145edd4bc1e130245f6bf41963b8cd14b417d0c4db7ba8f9735d42d381527f10bd3e116d0b35ed5def903ae949a1393eb5e184c408a55081aa7e3b333b926b818601528185015285850152835190810184527f27f0ab0caef178696fd6fb09d90e8a00173bfe02c1e3f76d8aef1370e619831e8185019081527f2a074c6bdc0dfc9e367dc30aa9cb31eb3dc0153a1cba22346e5ec5fc878b0a68828401528152835180850185527f0ba5bd81ce69e7b2718d1bbb584040f3d366c62e6a5f289323d771ba0c6d392281527f20728511d3608a8d3b5fd9bce8096fa2f0fe2b88ee0ab83399450cb17aebc238818501528184015290840152815160158082526102c08201909352919082015b604080518082019091526000808252602082015281526020019060019003908161055557505060808201908152604080518082019091527f06d1f3f066edaa3685eaa713dc84f6f8e290972ddfbdf195324314a319779a5f81527f1a8a67d666ec17570fc29c464c2762b9d67a5a305287bbd5d516a0b45ae4f4126020820152905180516000906105e8576105e86118f5565b602002602001018190525060405180604001604052807f2ee817f58bbaa79be14ded824fe3767b33c4c1ad39dc499a0b7f987b7acee45081526020017f185c93e7c0409e821fbf06f24d9480e834514541378baf2280e38a8d4c8614d5815250816080015160018151811061065f5761065f6118f5565b602002602001018190525060405180604001604052807f02f38b7cd454a76186f6c661ba0d0a6b7dca24c3ee4632f82a8fcc5f622c5c3a81526020017f2f9164b5bcbd103e9556c7d7d6cf02068f1b9f1a94b625e8b19e0935b9ca124581525081608001516002815181106106d6576106d66118f5565b602002602001018190525060405180604001604052807f1ddff3df123b53f055200353a385509500f621c42658743557704fcd1e6ca74d81526020017f1005b6fb681eda6ccc9216493972ce4ac447ab3fa59fc48dca509b39b8f4f927815250816080015160038151811061074d5761074d6118f5565b602002602001018190525060405180604001604052807f2abe8c68fd779d8b81e5207a7ae5e7abb3d337af69403250b658a68845bdef7481526020017f079de83604e57310eb6679287e5099d24803baece3516df10cb87bdef134ba6981525081608001516004815181106107c4576107c46118f5565b602002602001018190525060405180604001604052807f2e5ce6bd54bd13c792f2ec1334605ed1becbfc5ca906ae7e916b7ad924f915f681526020017f061e327cb02f17fc4e4a9338377d0798620515e9a442e02a1447f275318c99f7815250816080015160058151811061083b5761083b6118f5565b602002602001018190525060405180604001604052807f02ff278c04ec67356f19555a59662034fb31a498a95a932d4cac448ce1c7c44781526020017f0d598846dd628da8383f85378ea45acaeb430d0dd4d0fec540baa1417700f68d81525081608001516006815181106108b2576108b26118f5565b602002602001018190525060405180604001604052807f2dd6e61b04f40cc370daec918088e2dd3c89d2cb06af04e11b686824bd3e346181526020017f1fc7511743f0e8f81fbce5026c7f915465c8b5a81e0b06f2976932d335e149918152508160800151600781518110610929576109296118f5565b602002602001018190525060405180604001604052807f1296d259dea3fd00b6511945b63bf6d365e3e66975356243fc1ab9dbb3d1f2e081526020017f177089885c2e85515848cccc3da69337c1a06dbe9cc0c6431893021fbc3bf91f81525081608001516008815181106109a0576109a06118f5565b602002602001018190525060405180604001604052807f03395a2aab3f0571f87445647ad793d1624d0946827be76be7502883fe596f3981526020017f0d83145bdd06c4b9f64fbe370e53e2b08b7a2896345ace4086ccd01dcbd41f1d8152508160800151600981518110610a1757610a176118f5565b602002602001018190525060405180604001604052807f227c46372b26d66eb0a78bb0d539258cf00a277e6e76d15ec377fc2fb6560e0e81526020017f2052cd1ca090caa901f1336b71b7ef22d8a622cf452aeb9b3353f771d154ac9f8152508160800151600a81518110610a8e57610a8e6118f5565b602002602001018190525060405180604001604052807f2b01be3a8862cea4aea8ab991b26c9c1420118c6cd5be50cb8b8686317db69a881526020017f2358f0748bddec3b2d1a863aa69b5b3b11f9863d27a3682c040d726962a782a68152508160800151600b81518110610b0557610b056118f5565b602002602001018190525060405180604001604052807f16cd4992338faf22192769a49b802e302d55361a705eb1c084743fc8bb119b6381526020017f0a7e7448e21423eaaa162f77abdb0e2e65ee6a9b2dc650ac523cf3a68b904a768152508160800151600c81518110610b7c57610b7c6118f5565b602002602001018190525060405180604001604052807f0b5dd807aca4a471d710ce43e1dfeb39aa741b65fa27da221932e3faa4ebda1981526020017f19369275e51ac64eb4d877d98ce9452db81202c98a49799efc15673f3fb4e3318152508160800151600d81518110610bf357610bf36118f5565b602002602001018190525060405180604001604052807f0fbe80976a0913a367b8e26f7e7056b31a7d0c6c1571ff0c014a2c0e4ecd3db481526020017f0fc790e3b5e0ef960ca88cbd6d713fbd3c53a433006bda549cdf33c75b6e536c8152508160800151600e81518110610c6a57610c6a6118f5565b602002602001018190525060405180604001604052807f0a994015098da0d1cafba01cfe852ad7243ace402ed5f0e5d3c03cc4f915621681526020017f0fcf1dc106bdf98e9f55b7787ceb3ae6a62e34c144b83a40e78e4b570a9d78248152508160800151600f81518110610ce157610ce16118f5565b602002602001018190525060405180604001604052807f2de67bc8186c7857cc673e4582833eb1e9816320203c4529429bf507fa6b275281526020017f18dce1a24839ba705675f95fc2c906503358cc5c7e189c4a218b3456638d1c988152508160800151601081518110610d5857610d586118f5565b602002602001018190525060405180604001604052807f045cbe12bafa50d56858808435cfbb15e726849f78cd1ea2c9312918177d406781526020017f161f7c300b75bdc14470f19fd41bd7edc3dcf4ce332c811d3dc6579aac5bab718152508160800151601181518110610dcf57610dcf6118f5565b602002602001018190525060405180604001604052807f15c9a0c69520fe52e4d5bd7e69fac4b79602d20abc125a5c684b7711016efc3881526020017f2894c1d670f911cd3809b859b93786d97b58f4742b90e8d5a3aea5eb57129eef8152508160800151601281518110610e4657610e466118f5565b602002602001018190525060405180604001604052807e82c698389cd75c105e734392dc2a414481883e6ecb19180156bd34043192a181526020017f14dbc3fa9b6b67fbcebd3b19d586aa85f2bcc9a85eec61cee5149af47e7f99ac8152508160800151601381518110610ebc57610ebc6118f5565b602002602001018190525060405180604001604052807f2209a57304df0d0084b6a785ae4c0eb99f3aac46baf6181439762edb2e5fb08b81526020017f0f3829b8d02d20e87e28c37eea5c5d19e4d43c44156fef157e060eb9f5e184438152508160800151601481518110610f3357610f336118f5565b602002602001018190525090565b6040805180820190915260008082526020820152610f5d611551565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa90508080610f8c57fe5b5080610f9757600080fd5b505092915050565b6040805180820190915260008082526020820152610fbb61156f565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa90508080610f8c57fe5b604080518082019091526000808252602082015281517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479015801561103c57506020830151155b1561105c5750506040805180820190915260008082526020820152919050565b6040518060400160405280846000015181526020018285602001516110819190611960565b61108b908461193a565b90529392505050565b60408051600480825260a08201909252600091829190816020015b60408051808201909152600080825260208201528152602001906001900390816110af57505060408051600480825260a0820190925291925060009190602082015b6110f961158d565b8152602001906001900390816110f15790505090508a82600081518110611122576111226118f5565b60200260200101819052508882600181518110611141576111416118f5565b60200260200101819052508682600281518110611160576111606118f5565b6020026020010181905250848260038151811061117f5761117f6118f5565b6020026020010181905250898160008151811061119e5761119e6118f5565b602002602001018190525087816001815181106111bd576111bd6118f5565b602002602001018190525085816002815181106111dc576111dc6118f5565b602002602001018190525083816003815181106111fb576111fb6118f5565b6020026020010181905250611210828261121f565b9b9a5050505050505050505050565b6000815183511461122f57600080fd5b8251600061123e826006611982565b905060008167ffffffffffffffff81111561125b5761125b6115ee565b604051908082528060200260200182016040528015611284578160200160208202803683370190505b50905060005b838110156114bf578681815181106112a4576112a46118f5565b602002602001015160000151828260066112be9190611982565b6112c990600061194d565b815181106112d9576112d96118f5565b6020026020010181815250508681815181106112f7576112f76118f5565b602002602001015160200151828260066113119190611982565b61131c90600161194d565b8151811061132c5761132c6118f5565b60200260200101818152505085818151811061134a5761134a6118f5565b60209081029190910181015151015182611365836006611982565b61137090600261194d565b81518110611380576113806118f5565b60200260200101818152505085818151811061139e5761139e6118f5565b60209081029190910101515151826113b7836006611982565b6113c290600361194d565b815181106113d2576113d26118f5565b6020026020010181815250508581815181106113f0576113f06118f5565b60200260200101516020015160016002811061140e5761140e6118f5565b60200201518261141f836006611982565b61142a90600461194d565b8151811061143a5761143a6118f5565b602002602001018181525050858181518110611458576114586118f5565b602002602001015160200151600060028110611476576114766118f5565b602002015182611487836006611982565b61149290600561194d565b815181106114a2576114a26118f5565b6020908102919091010152806114b781611921565b91505061128a565b506114c86115b2565b6000602082602086026020860160086107d05a03fa905080806114e757fe5b50806114f257600080fd5b505115159695505050505050565b6040805160e08101909152600060a0820181815260c083019190915281526020810161152a61158d565b815260200161153761158d565b815260200161154461158d565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806115a06115d0565b81526020016115ad6115d0565b905290565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715611627576116276115ee565b60405290565b6040516060810167ffffffffffffffff81118282101715611627576116276115ee565b6040516020810167ffffffffffffffff81118282101715611627576116276115ee565b60006040828403121561168557600080fd5b61168d611604565b9050813581526020820135602082015292915050565b600082601f8301126116b457600080fd5b6040516040810181811067ffffffffffffffff821117156116d7576116d76115ee565b80604052508060408401858111156116ee57600080fd5b845b818110156117085780358352602092830192016116f0565b509195945050505050565b600082601f83011261172457600080fd5b8135602067ffffffffffffffff80831115611741576117416115ee565b8260051b604051601f19603f83011681018181108482111715611766576117666115ee565b60405293845285810183019383810192508785111561178457600080fd5b83870191505b848210156117a35781358352918301919083019061178a565b979650505050505050565b600060208083850312156117c157600080fd5b823567ffffffffffffffff808211156117d957600080fd5b818501915085601f8301126117ed57600080fd5b6117f5611650565b808484018881111561180657600080fd5b845b818110156118e75780358581111561181f57600080fd5b8601808b0361012081121561183357600080fd5b61183b611604565b6101008083121561184b57600080fd5b61185361162d565b61185d8f86611673565b81526080603f19850112156118725760008081fd5b61187a611604565b93506118898f604087016116a3565b84526118988f608087016116a3565b8c850152838c8201526118ae8f60c08701611673565b604082015282528301359150878211156118c85760008081fd5b6118d48d838501611713565b818b015286525050928601928601611808565b509098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016119335761193361190b565b5060010190565b818103818111156102cb576102cb61190b565b808201808211156102cb576102cb61190b565b60008261197d57634e487b7160e01b600052601260045260246000fd5b500690565b80820281158282048414176102cb576102cb61190b56fea2646970667358221220337ef6d87020d404b0a29a497446a6e4aec8fb208ca0500fd9ff43acf910c3c764736f6c63430008110033" . parse () . expect ("invalid bytecode")
        });
    pub struct Trollup<M>(ethers::contract::Contract<M>);
    impl<M> Clone for Trollup<M> {
        fn clone(&self) -> Self {
            Trollup(self.0.clone())
        }
    }
    impl<M> std::ops::Deref for Trollup<M> {
        type Target = ethers::contract::Contract<M>;
        fn deref(&self) -> &Self::Target {
            &self.0
        }
    }
    impl<M> std::fmt::Debug for Trollup<M> {
        fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
            f.debug_tuple(stringify!(Trollup))
                .field(&self.address())
                .finish()
        }
    }
    impl<M: ethers::providers::Middleware> Trollup<M> {
        #[doc = r" Creates a new contract instance with the specified `ethers`"]
        #[doc = r" client at the given `Address`. The contract derefs to a `ethers::Contract`"]
        #[doc = r" object"]
        pub fn new<T: Into<ethers::core::types::Address>>(
            address: T,
            client: ::std::sync::Arc<M>,
        ) -> Self {
            ethers::contract::Contract::new(address.into(), TROLLUP_ABI.clone(), client).into()
        }
        #[doc = r" Constructs the general purpose `Deployer` instance based on the provided constructor arguments and sends it."]
        #[doc = r" Returns a new instance of a deployer that returns an instance of this contract after sending the transaction"]
        #[doc = r""]
        #[doc = r" Notes:"]
        #[doc = r" 1. If there are no constructor arguments, you should pass `()` as the argument."]
        #[doc = r" 1. The default poll duration is 7 seconds."]
        #[doc = r" 1. The default number of confirmations is 1 block."]
        #[doc = r""]
        #[doc = r""]
        #[doc = r" # Example"]
        #[doc = r""]
        #[doc = r" Generate contract bindings with `abigen!` and deploy a new contract instance."]
        #[doc = r""]
        #[doc = r" *Note*: this requires a `bytecode` and `abi` object in the `greeter.json` artifact."]
        #[doc = r""]
        #[doc = r" ```ignore"]
        #[doc = r" # async fn deploy<M: ethers::providers::Middleware>(client: ::std::sync::Arc<M>) {"]
        #[doc = r#"     abigen!(Greeter,"../greeter.json");"#]
        #[doc = r""]
        #[doc = r#"    let greeter_contract = Greeter::deploy(client, "Hello world!".to_string()).unwrap().send().await.unwrap();"#]
        #[doc = r"    let msg = greeter_contract.greet().call().await.unwrap();"]
        #[doc = r" # }"]
        #[doc = r" ```"]
        pub fn deploy<T: ethers::core::abi::Tokenize>(
            client: ::std::sync::Arc<M>,
            constructor_args: T,
        ) -> ::std::result::Result<
            ethers::contract::builders::ContractDeployer<M, Self>,
            ethers::contract::ContractError<M>,
        > {
            let factory = ethers::contract::ContractFactory::new(
                TROLLUP_ABI.clone(),
                TROLLUP_BYTECODE.clone().into(),
                client,
            );
            let deployer = factory.deploy(constructor_args)?;
            let deployer = ethers::contract::ContractDeployer::new(deployer);
            Ok(deployer)
        }
        #[doc = "Calls the contract's `root` (0xebf0c717) function"]
        pub fn root(
            &self,
        ) -> ethers::contract::builders::ContractCall<M, ethers::core::types::U256> {
            self.0
                .method_hash([235, 240, 199, 23], ())
                .expect("method not found (this should never happen)")
        }
        #[doc = "Calls the contract's `submitBlock` (0x79857462) function"]
        pub fn submit_block(
            &self,
            l_2_block: [TxProof; 1usize],
        ) -> ethers::contract::builders::ContractCall<M, ()> {
            self.0
                .method_hash([121, 133, 116, 98], l_2_block)
                .expect("method not found (this should never happen)")
        }
    }
    impl<M: ethers::providers::Middleware> From<ethers::contract::Contract<M>> for Trollup<M> {
        fn from(contract: ethers::contract::Contract<M>) -> Self {
            Self(contract)
        }
    }
    #[doc = "Container type for all input parameters for the `root` function with signature `root()` and selector `[235, 240, 199, 23]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(name = "root", abi = "root()")]
    pub struct RootCall;
    #[doc = "Container type for all input parameters for the `submitBlock` function with signature `submitBlock((((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),uint256[])[1])` and selector `[121, 133, 116, 98]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthCall,
        ethers :: contract :: EthDisplay,
        Default,
    )]
    #[ethcall(
        name = "submitBlock",
        abi = "submitBlock((((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),uint256[])[1])"
    )]
    pub struct SubmitBlockCall {
        pub l_2_block: [TxProof; 1usize],
    }
    #[derive(Debug, Clone, PartialEq, Eq, ethers :: contract :: EthAbiType)]
    pub enum TrollupCalls {
        Root(RootCall),
        SubmitBlock(SubmitBlockCall),
    }
    impl ethers::core::abi::AbiDecode for TrollupCalls {
        fn decode(
            data: impl AsRef<[u8]>,
        ) -> ::std::result::Result<Self, ethers::core::abi::AbiError> {
            if let Ok(decoded) = <RootCall as ethers::core::abi::AbiDecode>::decode(data.as_ref()) {
                return Ok(TrollupCalls::Root(decoded));
            }
            if let Ok(decoded) =
                <SubmitBlockCall as ethers::core::abi::AbiDecode>::decode(data.as_ref())
            {
                return Ok(TrollupCalls::SubmitBlock(decoded));
            }
            Err(ethers::core::abi::Error::InvalidData.into())
        }
    }
    impl ethers::core::abi::AbiEncode for TrollupCalls {
        fn encode(self) -> Vec<u8> {
            match self {
                TrollupCalls::Root(element) => element.encode(),
                TrollupCalls::SubmitBlock(element) => element.encode(),
            }
        }
    }
    impl ::std::fmt::Display for TrollupCalls {
        fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
            match self {
                TrollupCalls::Root(element) => element.fmt(f),
                TrollupCalls::SubmitBlock(element) => element.fmt(f),
            }
        }
    }
    impl ::std::convert::From<RootCall> for TrollupCalls {
        fn from(var: RootCall) -> Self {
            TrollupCalls::Root(var)
        }
    }
    impl ::std::convert::From<SubmitBlockCall> for TrollupCalls {
        fn from(var: SubmitBlockCall) -> Self {
            TrollupCalls::SubmitBlock(var)
        }
    }
    #[doc = "Container type for all return fields from the `root` function with signature `root()` and selector `[235, 240, 199, 23]`"]
    #[derive(
        Clone,
        Debug,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
        Default,
    )]
    pub struct RootReturn(pub ethers::core::types::U256);
    #[doc = "`G1Point(uint256,uint256)`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct G1Point {
        pub x: ethers::core::types::U256,
        pub y: ethers::core::types::U256,
    }
    #[doc = "`G2Point(uint256[2],uint256[2])`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct G2Point {
        pub x: [ethers::core::types::U256; 2],
        pub y: [ethers::core::types::U256; 2],
    }
    #[doc = "`TxProof(((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256)),uint256[])`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct TxProof {
        pub proof: Proof,
        pub input: Vec<ethers::core::types::U256>,
    }
    #[doc = "`Proof((uint256,uint256),(uint256[2],uint256[2]),(uint256,uint256))`"]
    #[derive(
        Clone,
        Debug,
        Default,
        Eq,
        PartialEq,
        ethers :: contract :: EthAbiType,
        ethers :: contract :: EthAbiCodec,
    )]
    pub struct Proof {
        pub a: G1Point,
        pub b: G2Point,
        pub c: G1Point,
    }
}
