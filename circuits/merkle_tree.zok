import "hashes/poseidon/poseidon" as hash;

from "./types" import DEPTH, Tx, Account;

def select(bool condition, field left, field right) -> (field, field) {
	return (condition ? right : left, condition ? left : right);
}

def merge(field v0, field v1) -> field {
	return if v0 == 0 && v1 == 0 {
		0
	} else { if v0 == 0 {
		v1
	} else { if v1 == 0 {
		v0
	} else {
		hash::<2>([v0, v1])
	}}};
}

def hash_leaf(Account acc) -> field {
	return if acc.balance == 0 && acc.nonce == 0 {
		0
	} else {
		hash::<2>([acc.id, hash::<2>([acc.balance, acc.nonce])])
	};
}

// Merke-Tree inclusion proof for tree depth 256 using Poseidon.
// directionSelector => true if current digest is on the rhs of the hash
def verify_merkle_tree(field root, field leaf, bool[DEPTH] directionSelector, field[DEPTH] path) -> bool {
	// Start from the leaf
	field mut digest = leaf;

	// Loop up the tree
	for u32 i in 0..DEPTH {
		(field, field) s = select(directionSelector[i], digest, path[i]);
		digest = merge(s.0, s.1);
	}

	return digest == root;
}

def main(field preRoot, field postRoot, Tx tx, Account[2] preAccounts, bool[2][DEPTH] directionSelector, field[2][DEPTH] prePath, field[2][DEPTH] postPath) -> bool {
	// Verify current state
	for u32 i in 0..2 {
		assert(verify_merkle_tree(preRoot, hash_leaf(preAccounts[i]), directionSelector[i], prePath[i]));
	}

	/* Apply tx changes */
	assert(tx.sender == preAccounts[0].id);
	assert(tx.to == preAccounts[1].id);

	assert(preAccounts[0].balance >= tx.value);
	assert(preAccounts[0].nonce < tx.nonce);

	Account postAccountSender = Account {
		id: preAccounts[0].id,
		balance: preAccounts[0].balance - tx.value,
		nonce: tx.nonce
	};

	Account postAccountRecipient = Account {
		id: preAccounts[1].id,
		balance: preAccounts[1].balance + tx.value,
		nonce: preAccounts[1].nonce
	};

	/******************/

	// Verify new state
	assert(verify_merkle_tree(postRoot, hash_leaf(postAccountSender), directionSelector[0], postPath[0]));
	assert(verify_merkle_tree(postRoot, hash_leaf(postAccountRecipient), directionSelector[1], postPath[1]));

	return true;
}
