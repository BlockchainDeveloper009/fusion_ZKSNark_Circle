import "ecc/edwardsAdd" as add;
import "ecc/edwardsOnCurve" as onCurve;
import "ecc/edwardsOrderCheck" as orderCheck;
from "ecc/babyjubjubParams" import BabyJubJubParams;

import "hashes/poseidon/poseidon" as poseidon;

import "utils/pack/bool/nonStrictUnpack256" as unpack256bool;

from "./types" import Tx, Signature;

/// Adaptation of `scalarMult` from Zokrates' stdlib
/// which allows any number of bits in the exponent.
/// Here we use 257 more specifically, since we have a Poseidon hash (254 bits)
/// multiplied by 8 in https://github.com/arnaucube/babyjubjub-rs
/// which gives us 257 bits since the operation is done on big numbers.
def scalarMult<BITS>(bool[BITS] exponent, field[2] pt, BabyJubJubParams context) -> field[2] {
    field[2] infinity = context.INFINITY;

    field[2] mut doubledP = pt;
    field[2] mut accumulatedP = infinity;

    for u32 i in 0..BITS {
        u32 j = (BITS - 1) - i;
        field[2] candidateP = add(accumulatedP, doubledP, context);
        accumulatedP = exponent[j] ? candidateP : accumulatedP;
        doubledP = add(doubledP, doubledP, context);
    }

    assert(onCurve(accumulatedP, context));
    return accumulatedP;
}

/// Verifies an EdDSA Signature.
///
/// Checks the correctness of a given EdDSA Signature (R,S) for the provided
/// public key A and message M.
/// This is based on the verification done in
/// https://github.com/arnaucube/babyjubjub-rs
///
/// Returns true if `sig` is a valid signature, false otherwise.
def main(Signature sig) -> bool {
	BabyJubJubParams context = BabyJubJubParams {
		// Order of the curve for reference: 21888242871839275222246405745257275088614511777268538073601725287587578984328
		JUBJUB_C: 8, // Cofactor
		JUBJUB_A: 168700, // Coefficient A
		JUBJUB_D: 168696, // Coefficient D

		// Montgomery parameters
		MONT_A: 168698,
		MONT_B: 1,

		// Point at infinity
		INFINITY: [0, 1],

		// Base Point
		Gu: 5299619240641551281634865583518297030282874472190772894086521144482721001553,
		Gv: 16950150798460657717958625567821834550301663161624707787222815936182638968203
	};
    field[2] G = [context.Gu, context.Gv];

    // Check if R is on curve and if it is not in a small subgroup. A is public input and can be checked offline
    assert(onCurve([sig.r.x, sig.r.y], context)); // throws if R is not on curve
    assert(orderCheck([sig.r.x, sig.r.y], context));

	field hm = poseidon::<5>([sig.r.x, sig.r.y, sig.a.x, sig.a.y, sig.m]);
	bool[257] hm8 = [...unpack256bool(hm)[2..], false, false, false];

    bool[256] sBits = unpack256bool(sig.s);
    field[2] lhs = scalarMult(sBits, G, context);

    field[2] Ahm8 = scalarMult(hm8, [sig.a.x, sig.a.y], context);
    field[2] rhs = add([sig.r.x, sig.r.y], Ahm8, context);

    assert(lhs == rhs);

	return true;
}
